/*
 * Copyright (C) 2020 Muntashir Al-Islam
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

apply from: "$gradle.ext.appManagerRoot/common.gradle"

dependencies {
    compileOnly project(path: ':HiddenApi')
    api project(path: ':libserver')
}

static def toPath(String s) {
    if (isWin()) {
        return s.replace('/', '\\')
    } else {
        return s
    }
}

static def isWin() {
    return org.gradle.internal.os.OperatingSystem.current().isWindows()
}

String.metaClass.toPath = { -> toPath(delegate) }

ext {
    debugClassDir = project.rootDir.absolutePath + '/server/build/intermediates/javac/debug/classes'.toPath()
    libserverClassDir = project.rootDir.absolutePath + '/libserver/build/intermediates/javac/debug/classes'.toPath()
    hiddenApiClassDir = project.rootDir.absolutePath + '/HiddenApi/build/intermediates/javac/debug/classes'.toPath()
    amJar = project.rootDir.absolutePath + '/app/src/main/assets/am.jar'.toPath()
}

build.doLast {
    if (!isModified()) {
        println("Files aren't modified, skip creating jar files.")
        return
    }
    println("Build success, creating jar files...")
    def buildArgs = ['--release', '--output', amJar]
    buildArgs.addAll(get_args(libserverClassDir, ["io/github/muntashirakon/AppManager/server/common/"]))
    buildArgs.addAll(get_args(debugClassDir,  ["io/github/muntashirakon/AppManager/server/"]))
    buildArgs.addAll(get_args(hiddenApiClassDir,  [""]))
    buildArgs.addAll(['--lib', "${android.sdkDirectory.path}/platforms/android-${rootProject.ext.targetSdk}/android.jar"])
    exec {
        workingDir = project.rootDir
        executable = file("${android.sdkDirectory.path}/build-tools/${android.buildToolsVersion}/d8${isWin() ? '.bat' : ''}".toPath())
        args = buildArgs
    }
    println("Created ${amJar}")
}

def isModified() {
    def stdout = new ByteArrayOutputStream()
    exec {
        workingDir = project.rootDir
        executable = "${project.rootDir}/scripts/check_am_server.sh"
        standardOutput = stdout
    }
    return stdout.toString().trim() == "M"
}

def get_args(String path, List pkgPath) {
    def ret = []
    pkgPath.forEach {
        it ->
            def file = new File(path, it.toPath())
            loadClsFiles(file, ret)
    }
    return ret
}

def loadClsFiles(File f, List paths) {
    File[] files = f.listFiles()
    if (files != null) {
        files.each {
            file ->
                if (file.file) {
                    if (file.name.endsWith(".class")) {
                        paths.add(file.path)
                    }
                } else {
                    loadClsFiles(file, paths)
                }
        }
    }
}

task cleanupJar() {
    doLast {
        file("${rootProject.projectDir.absolutePath}/app/src/main/assets/am.jar").delete()
    }
}

clean.dependsOn cleanupJar
