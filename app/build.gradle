/*
 * Copyright (C) 2020 Muntashir Al-Islam
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

apply plugin: 'com.android.application'

android {
    compileSdkVersion 29
    buildToolsVersion '30.0.2'
    ndkVersion '21.3.6528147'

    defaultConfig {
        applicationId 'io.github.muntashirakon.AppManager'
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 364
        versionName "2.5.16"
    }

    signingConfigs {
        debug {
            storeFile file('dev_keystore.jks')
            storePassword 'kJCp!Bda#PBdN2RLK%yMK@hatq&69E'
            keyPassword 'kJCp!Bda#PBdN2RLK%yMK@hatq&69E'
            keyAlias 'key0'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        preRelease {
            minifyEnabled false
            versionNameSuffix '-PRE'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix '.debug'
            versionNameSuffix '-DEBUG'
            signingConfig signingConfigs.debug
        }
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            universalApk true
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ["src/main/jniLibs"]
        }
    }
    aaptOptions {
        noCompress 'jar', 'sh'
    }
}

dependencies {
    compileOnly project(path: ':HiddenApi')

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation project(path: ':libApkParser')
    implementation project(path: ':libOpenPGP')

    implementation 'com.google.android.material:material:1.3.0-alpha02'
    implementation 'androidx.appcompat:appcompat:1.3.0-alpha02'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.2.0-alpha01'
    implementation 'androidx.preference:preference:1.1.1'

    def libsuVersion = '3.0.2'
    implementation "com.github.topjohnwu.libsu:core:${libsuVersion}"
    implementation 'com.tananaev:adblib:1.2'

//    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.4'
}

task toybox {
    println("=== toybox: start ===")
    File file = new File("${rootProject.projectDir.absolutePath}/app/src/main/jniLibs/arm64-v8a/libtoybox.so")
    if (!file.exists()) {
        buildToybox()
    } else {
        println("Skipping toybox since the files already exists.")
    }
    println("=== toybox: finish ===")
}

def buildToybox() {
    def ndkPath = android.ndkDirectory
    def buildExec = "${rootProject.projectDir.absolutePath}/toybox-all.sh"
    def cmdArgs = [ndkPath]
    println("NDK Path: ${ndkPath}")
    println("Exec Path: ${buildExec}")
    exec {
        workingDir = rootProject.projectDir.absolutePath
        executable = buildExec
        args = cmdArgs
    }
}

preBuild.dependsOn ":AppManagerServer:build", toybox
