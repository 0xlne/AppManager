apply plugin: 'com.android.dynamic-feature'

android {
    compileSdkVersion rootProject.ext.compileSdk
    buildToolsVersion rootProject.ext.buildTools

    defaultConfig {
        minSdkVersion rootProject.ext.minSdk
        targetSdkVersion rootProject.ext.targetSdk
    }

    buildTypes {
        preRelease {
        }
    }

    compileOptions {
        encoding "UTF-8"
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation project(":app")
}

task buildDocs {
    doLast {
        println("=== docs: start ===")
        File file = new File("${rootProject.projectDir.absolutePath}/feat_docs/src/main/assets/docs")
        if (!file.exists()) {
            def buildExec = "${rootProject.projectDir.absolutePath}/scripts/make_feat_docs.sh"
            exec {
                workingDir = project.rootDir
                executable = buildExec
            }
        } else {
            println("Skip building docs since the files already exist.")
        }
        println("=== docs: finish ===")
    }
}

task cleanupDocs {
    doLast {
        File file = new File("${rootProject.projectDir.absolutePath}/feat_docs/src/main/assets/docs")
        if (file.exists()) {
            deleteDir(file)
        }
    }
}

def deleteDir(File dir) {
    if (dir != null && dir.isDirectory()) {
        String[] children = dir.list()
        if (children == null) return false
        for (String child : children) {
            boolean success = deleteDir(new File(dir, child))
            if (!success) return false
        }
        return dir.delete()
    } else if (dir != null && dir.isFile()) {
        return dir.delete()
    } else return false
}

preBuild.dependsOn buildDocs
clean.dependsOn cleanupDocs
