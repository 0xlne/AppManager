<?xml version="1.0" encoding="UTF-8"?>
<!--This file is auto-generated by ./scripts/docs.php. DO NOT EDIT THIS FILE.-->
<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
    <string name="intro_main-introduction==title">Introduction</string>
    <string name="intro_main-terminologies==title">Terminologies</string>
    <string name="intro_main-supportedversions==title">Supported Versions</string>
    <string name="intro_main-officialsources==title">Official Sources</string>
    <string name="intro_main-binsources==title">Binary Distribution Sources</string>
    <string name="intro_main-sourcecodelinks==title">Links to Source Code</string>
    <string name="intro_main-translations==title">Translations</string>
    <string name="intro_main-contributing==title">Contributing</string>
    <string name="intro_main-buiding==title">Build Instructions</string>
    <string name="intro_main-submitpatches==title">Submitting patches</string>
    <string name="intro_main-donation==title">Donation \&amp; Funding</string>
    <string name="intro_main-contact==title">Contact</string>
    <string name="intro_main-introduction">App Manager is an advanced package manager for Android. It offers countless features, and consequently, requires a user
manual to assist its users. This document acts as a user manual for App Manager in the sense that it aims to describe
every feature that App Manager has to offer. This document can also be considered as the ``official\'\' guidelines for
App Manager, and represents the expected behaviour of App Manager. Translations can misinterpret this document (which is
written in English). Therefore, every capable user should read the English version of the document to get the best out
of App Manager. There might as well be other unofficial or third-party resources such as blog articles, videos, chat
groups, etc. While these resources might be useful for many people, they might not be up-to-date with the current
version of App Manager. If any deviations are detected in App Manager from this document, they should be reported in the
\href{https://github.com/MuntashirAkon/AppManager/issues}{App Manager issue tracker}.</string>
    <string name="intro_main-terminologies">\begin{itemize}
    \item \textbf{AM} --- Short name for App Manager.
    \item \textbf{Block/Unblock} --- Used for component blocking or unblocking. How components are blocked depends on
    the user preferences.
    \item \textbf{IFW} --- Short form of Intent Firewall.
    \item \textbf{Ops} --- Short name for operations, e.g.\ app ops, batch ops, 1-click ops
    \item \textbf{SSAID} --- Short form of \texttt{Settings.Secure.ANDROID\_ID}. It is a device identifier assigned to
    each app (Android Oreo and onwards). It is generated from the combination of the signing certificate of the app
    and the SSAID set for the package \texttt{android}. As a result, it is guaranteed to be the same for an app unless
    the user choose to format the device. It is widely used for tracking.
    \item \textbf{Tracker} --- Denotes tracker components throughout the document and in App Manager except in the
    \hyperref[sec:scanner-page]{scanner page}. Trackers include libraries such as crash reporters, analytics,
    profiling, identification, ad, location, etc. Thus, they are not equal in functions. There is no distinction or bias
    between open source and closed source libraries that promote tracking.
\end{itemize}</string>
    <string name="intro_main-supportedversions">At present, the supported versions are v2.6.0 (stable), v3.0.0 (alpha and debug releases). Previous versions of App
Manager may contain security vulnerabilities and should not be used.</string>
    <string name="intro_main-binsources">App Manager is distributed using the following sources. Unofficial sources may distribute modified versions of App
Manager, and none but you shall be responsible for the consequences of using such distributions.
\begin{enumerate}
    \item Official F-Droid repository.\footnote{For distributing normal releases only}\\
    \textit{Link:} \url{https://f-droid.org/packages/io.github.muntashirakon.AppManager}
    \item GitHub repository.\\
    \textit{Normal releases:} \url{https://github.com/MuntashirAkon/AppManager/releases}\\
    \textit{Debug releases:} \url{https://github.com/MuntashirAkon/AppManager/actions}
    \item Telegram.\\
    \textit{Normal releases:} \url{https://t.me/AppManagerChannel}\\
    \textit{Debug releases:} \url{https://t.me/AppManagerDebug}
\end{enumerate}</string>
    <string name="intro_main-sourcecodelinks">All but GitHub are the mirror links. The tags should always be up-to-date, but the master branch is not guaranteed to be
up-to-date. If the target is to clone the master branch, use the GitHub link instead of the others.</string>
    <string name="intro_main-translations">App Manager does not accept translations directly via pull/merge requests. Translations are managed automatically via
Weblate. To join the translation team, visit \url{https://hosted.weblate.org/engage/app-manager/}.</string>
    <string name="intro_main-contributing">There are multiple ways a user can contribute, such as creating helpful issues, attending discussions, improving
documentations and translations, adding unrecognised libraries or trackers, reviewing the source code as well as
reporting security vulnerabilities.</string>
    <string name="intro_main-buiding">Build instructions are available in the BUILDING file located at the root directory of the source.</string>
    <string name="intro_main-submitpatches">Repositories located in sites other than GitHub are currently considered mirrors, and pull/merge requests submitted in
those sites will not be accepted.\footnote{GitHub pull requests will be merged manually using the corresponding patches.
As a result, GitHub may wrongfully mark them closed instead of merged.} Instead, patches (as \texttt{.patch} files) can
be submitted via email attachments. \textit{Signing-off is a requirement.} See the CONTRIBUTING file located at the root
directory of the source for more information.

\begin{warning}{Notice}
    In case of submitting patches via email, the whole conversation may be publicly accessible in the future. So, do not
    include any personally identifiable information (PII) other than your name or email address.
\end{warning}</string>
    <string name="intro_main-donation_1">\emph{Donation or purchasing is not a requirement in order to use App Manager.} While App Manager does not support any
purchases, donations can be sent to the owner of App Manager through Open Source Collective.

Open Source Collective is a fiscal host in the Open Collective platform which helps the open source projects manage
their finances. At present, it supports payments through bank accounts, PayPal, credit or debit cards and
cryptocurrencies.

\textit{Link:} \url{https://opencollective.com/muntashir}.

By sending donations, the senders agree that they shall not use the donations as a leverage to prioritise their
requested features. Feature requests do not require any bounties or donations, and they are prioritised in accordance
with the preferences of the owner.

\emph{App Manager accepts any offers of funding or grants.} Representatives of the interested organization can contact
the owner directly using the options given in ยง\cref{sec:contact}.</string>
    <string name="intro_main-contact">Muntashir Al-Islam\footnote{You can also address me as ``Muntashir Akon\'\'}\\
Email: \href{mailto:muntashirakon\@riseup.net}{muntashirakon [at] riseup [dot] net}\\
Key Fingerprint: \texttt{7bad37c2981e41f8f6abea7f58f0b4f26c346fce}\\
GitHub: \url{https://github.com/MuntashirAkon}\\
Twitter: \url{https://twitter.com/Muntashir}</string>
    <string name="pages_mainpage-section==title">Main Page</string>
    <string name="pages_mainpage-howappopswork==title">An application list item in the main page</string>
    <string name="pages_mainpage-batch-operations==title">Batch Operations</string>
    <string name="pages_mainpage-colour-codes==title">Colour Codes</string>
    <string name="pages_mainpage-application-types==title">Application Types</string>
    <string name="pages_mainpage-version-info==title">Version Info</string>
    <string name="pages_mainpage-options-menu==title">Options Menu</string>
    <string name="pages_mainpage-instructions==title">Instructions</string>
    <string name="pages_mainpage-list-options==title">List Options</string>
    <string name="pages_mainpage-sort==title">Sort</string>
    <string name="pages_mainpage-filter==title">Filter</string>
    <string name="pages_mainpage-profile_name==title">Profile Name</string>
    <string name="pages_mainpage-1-click-ops==title">1-Click Ops</string>
    <string name="pages_mainpage-appusage==title">App Usage</string>
    <string name="pages_mainpage-systemconfig==title">System Config</string>
    <string name="pages_mainpage-running-apps==title">Running Apps</string>
    <string name="pages_mainpage-profiles==title">Profiles</string>
    <string name="pages_mainpage-log-viewer==title">Log Viewer</string>
    <string name="pages_mainpage-apkupdater==title">APK Updater</string>
    <string name="pages_mainpage-termux==title">Termux</string>
    <string name="pages_mainpage-settings==title">Settings</string>
    <string name="pages_mainpage-section">Main page lists all the installed, uninstalled and backed up applications. A single click on any installed app item
opens the respective \hyperref[sec:app-details-page]{App Details page}. For the uninstalled system apps, it displays a
dialog prompt which can be used to reinstall the app. Using the \hyperlink{par:main-page-sort}{sort} option from the
list options, the app items can be sorted in various ways and preserved on exit. It is also possible to filter items
using the \hyperlink{par:main-page-filter}{filter} option in the list options. Filtering is possible also via the search
bar with additional support for the regular expressions.</string>
    <string name="pages_mainpage-batch-operations">Batch operations or operation on multiple applications are also available within this page. Multiple selection mode can
be activated by clicking on any app icon or by long-clicking on any items in the list. Once activated, a single click on
a list item selects it instead of opening the App Details page. In this mode, the batch operations are located in the
multiple selection menu at the bottom of the page. The operations include:
\begin{itemize}
    \item Adding the selected applications to a \hyperref[sec:profiles-page]{profile}
    \item \hyperref[sec:backup-restore]{Backing up, restoring or deleting} the applications
    \item Blocking the trackers from the applications
    \item Clearing data or cache from the applications
    \item Enabling/disabling/force-stopping/uninstalling the applications
    \item Exporting the blocking rules saved inside App Manager
    \item Preventing the background operations of the applications (Android 7 and onwards)
    \item Saving the APK files to \texttt{AppManager/apks}
    \item Setting \hyperref[sec:net-policy]{net policies}
\end{itemize}

\begin{tip}{Accessibility}
    After the multiple selection mode has been activated, it is possible to navigate in or out of the multiple selection
    menu using the right or left keys of the keyboard or remote.
\end{tip}</string>
    <string name="pages_mainpage-colour-codes">\begin{itemize}
    \item \colorbox{AMLightGreyishOrange}{\textcolor{black}{Light greyish orange (day)}} / \colorbox{AMDarkBlue}{
        \textcolor{white}{dark blue (night)}} -- The application is selected for batch operation
    \item \colorbox{AMLightRed}{\textcolor{black}{Light red (day)}} / \colorbox{AMVeryDarkRed}{\textcolor{white}
    {dark red (night)}} -- Disabled app
    \item \colorbox{AMYellow}{\textcolor{black}{Yellow Star}} -- Debuggable application
    \item \textcolor{AMOrange}{Orange \textit{Date}} -- The app has access to the system logs
    \item \textcolor{AMOrange}{Orange \textit{UID}} -- The user ID is being shared among multiple applications
    \item \textcolor{AMOrange}{Orange \textit{SDK}} -- The application possibly uses cleartext (ie. HTTP) traffic
    \item \textcolor{red}{Red \textit{package name}} -- The application does not allow clearing its data
    \item \textcolor{red}{Red \textit{backup}} -- The uninstalled application with one or more backups present in App
    Manager
    \item \textcolor{AMOrange}{Orange \textit{backup}} -- Outdated backup, i.e.\ the base backup contains an older
    version of the installed application
    \item \textcolor{AMDarkCyan}{Dark cyan \textit{backup}} -- Up to date backup, i.e.\ the base backup contains the
    same or higher version of the installed application
    \item \textcolor{AMDarkCyan}{Dark cyan \textit{package name}} -- Force-stopped application
    \item \textcolor{AMDarkCyan}{Dark cyan \textit{version}} -- Inactive application
    \item \textcolor{magenta}{Magenta} -- Persistent application i.e.\ it remains running all the time.
\end{itemize}</string>
    <string name="pages_mainpage-application-types">An application can be either a \textbf{User} or a \textbf{System} application along with the following suffixes:
\begin{itemize}
    \item \texttt{X} -- Supports multiple architectures
    \item \texttt{0} -- No dex files present in the application
    \item \texttt{\textdegreeยฐ} -- Suspended application
    \item \texttt{\#} -- The application requested the system to allocate a large heap i.e. large runtime memory
    \item \texttt{\?} -- The application requested the virtual machine to be in the safe mode.
\end{itemize}</string>
    <string name="pages_mainpage-version-info">Version name is followed by the prefixes below:
\begin{itemize}
    \item \texttt{\_} -- No hardware acceleration (breaking the in-app animations or transparencies)
    \item \texttt{\textasciitilde} -- Test-only application
    \item \texttt{debug} -- Debuggable application
\end{itemize}</string>
    <string name="pages_mainpage-options-menu">Options menu offers several options that can be used to sort and filter the listed applications as well as to navigate
to different pages within or outside App Manager.</string>
    <string name="pages_mainpage-instructions">Clicking on the \textbf{Instructions} opens the offline version of the App Manager user manual. It may also open the
online version if the corresponding feature split i.e.\ \texttt{feat\_docs} is not installed, or if an WebView is not
present in the system to load the manual.</string>
    <string name="pages_mainpage-list-options">\textbf{List options} contain the options to sort and filter the list in the main page.</string>
    <string name="pages_mainpage-sort">The applications listed in the main page can be sorted in the following ways:
\begin{itemize}
    \item \textbf{User apps first.} The user applications are listed on the top
    \item \textbf{App label.} Sort the list in ascending order based on their application labels (also known as
    \textit{application names}). This is the default sorting preference
    \item \textbf{Package name.} Sort the list in ascending order based on their package names
    \item \textbf{Last update.} Sort the list in descending order based on the date they were last updated
    \item \textbf{Shared user ID.} Sort the list in descending order based on their kernel user ID
    \item \textbf{Target SDK.} Sort the list in ascending order based on their target SDK
    \item \textbf{Signature.} Sort the list in ascending order based on their signing information
    \item \textbf{Disabled first.} The disabled applications are listed on the top
    \item \textbf{Blocked first.} Sort the list in descending order based on the number of blocked components each
    application has
    \item \textbf{Backed up first.} Display the applications with backups on the top
    \item \textbf{Trackers.} Sort the list in descending order based on the number of tracker components each
    application has
    \item \textbf{Last actions.} Sort the list in descending order based on the latest time and date of any actions made
    to the applications within App Manager.
\end{itemize}

In addition, there is the \textit{reverse} option that can be used to sort the list in the reverse order. Regardless of
the sorting preferences, the applications are sorted alphabetically at first in order to prevent producing any random
sorting results.</string>
    <string name="pages_mainpage-filter">The applications listed in the main page can be filtered in the following ways:
\begin{itemize}
    \item \textbf{User apps.} List only the user applications
    \item \textbf{System apps.} List only the system applications
    \item \textbf{Disabled apps.} List only the disabled applications
    \item \textbf{Apps with rules.} List the applications with one or more blocking rules
    \item \textbf{Apps with activities.} List the applications with one or more activities
    \item \textbf{Apps with backups.} List the applications with one or more backups
    \item \textbf{Running apps.} List the applications that are currently running
    \item \textbf{Apps with splits.} List the applications with one or more split APK files
    \item \textbf{Installed apps.} List only the installed applications
    \item \textbf{Uninstalled apps.} List only the uninstalled applications
    \item \textbf{Apps without backups.} List the applications with no backups present.
\end{itemize}

Unlike sorting, it is possible to apply more than one filtering options at the same time. For example, the disabled user
applications can be listed by selecting both \textit{User apps} and \textit{Disabled apps}. This can be particularly
useful for \hyperref[subsec:batch-operations]{batch operations} where filtering the user applications may be necessary
to carry out certain operations safely.</string>
    <string name="pages_mainpage-profile_name">It is also possible to list the applications that are only present in a \hyperref[sec:profiles-page]{profile}. This can
be useful for carrying out certain operations on a profile (e.g., uninstalling all the applications in a profile) that
cannot be done via the \hyperref[sec:profiles-page]{Profiles page}.</string>
    <string name="pages_mainpage-1-click-ops">\textbf{1-Click Ops} stands for the single-click operations. It opens the \hyperref[sec:1-click-ops-page]{corresponding
page} in a new activity.</string>
    <string name="pages_mainpage-appusage">App usage statistics such as \textit{screen time}, \textit{data usage} (both mobile and Wi-Fi), \textit{the number of
times an app was opened} can be accessed by clicking on the \textbf{App Usage} option in the menu. However, it requires
the \textit{Usage Access} permission. This menu item will not be listed if the usage access feature is disabled in
\hyperref[subsec:enable/disable-features]{settings}.</string>
    <string name="pages_mainpage-systemconfig">This menu item opens a new page where various system configurations, blacklists/whitelists included in Android by the
OEM, the vendor, the AOSP or the Magisk modules are displayed. It requires root. Therefore, this menu item will not be
listed if root permission is unavailable to App Manager.</string>
    <string name="pages_mainpage-running-apps">This menu item opens a new page where a list of running applications or processes are displayed. It also displays the
current memory and cache (if available) usage. If root or ADB is not available to App Manager, it only displays itself
in the recent versions of Android. The running applications or processes can also be force-stopped or killed within the
resultant page. Logs for each process ID (PID) can also be viewed in the \hyperref[subsubsec:log-viewer]{log viewer}.
In addition, it is also possible to carry out batch operations either by clicking on the icon or by long-clicking on an
item. Normal click on any items opens a dialog where a more detailed information is displayed.</string>
    <string name="pages_mainpage-profiles">This menu item opens the \hyperref[sec:profiles-page]{profiles page}. Profiles are a way to configure regularly used
tasks. They can also be invoked via shortcuts.</string>
    <string name="pages_mainpage-log-viewer">This menu item opens the log viewer page which can display and manage logs using the \texttt{logcat} command. By
default, this page can only display the activities of App Manager. However, it can display logs from all the
processes if \texttt{android.permission.READ\_LOGS} is granted. This permission granted automatically if the current
\hyperref[subsec:mode-of-operation]{mode of operation} is either root or ADB.</string>
    <string name="pages_mainpage-apkupdater">If the app \href{https://github.com/rumboalla/apkupdater}{APK Updater} is installed in the system, it can be opened
directly via this menu item. The option remains hidden if the app is not present in the system.</string>
    <string name="pages_mainpage-termux">If the app \href{https://github.com/termux/termux-app}{Termux} is installed in the system, the running session (or a
new session) can be opened directly via this menu item. The option remains hidden if the app is not present in the
system.</string>
    <string name="pages_mainpage-settings">This menu item opens the in-app \hyperref[sec:settings-page]{Settings page}.</string>
    <string name="pages_appdetails-section==title">App Details Page</string>
    <string name="pages_appdetails-colour-codes==title">Colour Codes</string>
    <string name="pages_appdetails-app-info-tab==title">App Info Tab</string>
    <string name="pages_appdetails-app-info-general-information==title">General Information</string>
    <string name="pages_appdetails-horizontal-action-panel==title">Horizontal Action Panel</string>
    <string name="pages_appdetails-app-info-options-menu==title">Options Menu</string>
    <string name="pages_appdetails-config-termux==title">Termux</string>
    <string name="pages_appdetails-component-tabs==title">Component Tabs</string>
    <string name="pages_appdetails-activities==title">Activities</string>
    <string name="pages_appdetails-servcies==title">Services</string>
    <string name="pages_appdetails-app-details-receivers==title">Receivers</string>
    <string name="pages_appdetails-providers==title">Providers</string>
    <string name="pages_appdetails-additionalrootfeatures==title">Additional Features for Rooted Phones</string>
    <string name="pages_appdetails-blockedcomponents==title">Blocking Components</string>
    <string name="pages_appdetails-blocking-trackers==title">Blocking Trackers</string>
    <string name="pages_appdetails-permission-tabs==title">Permission Tabs</string>
    <string name="pages_appdetails-app-ops==title">App Ops</string>
    <string name="pages_appdetails-usespermissions==title">Uses Permissions</string>
    <string name="pages_appdetails-permissions==title">Permissions</string>
    <string name="pages_appdetails-signatures-tab==title">Signatures Tab</string>
    <string name="pages_appdetails-other-tabs==title">Other Tabs</string>
    <string name="pages_appdetails-section">\textbf{App Details} page consists of 11 (eleven) tabs. It describes almost every bit of information an app
can have, including all attributes from its manifest, \hyperref[ch:app-ops]{application operations}, signing
information, libraries, and so on.</string>
    <string name="pages_appdetails-colour-codes">List of background colours used in this page, and their meaning:
\begin{itemize}
    \item \colorbox{AMRed}{\textcolor{black}{Red (day)}} / \colorbox{AMDarkRed}{\textcolor{white}{dark red (night)}}
    -- Denotes any app ops or permissions having the dangerous flag, or any components blocked within App Manager

    \item \colorbox{AMLightRed}{\textcolor{black}{Light red (day)}} / \colorbox{AMVeryDarkRed}{\textcolor{white}{very
    dark red (night)}} -- Denotes the components disabled outside of App Manager

    \begin{tip}{Note}
        A component marked as disabled does not always mean that it is disabled by the user: It could also be disabled
        by the system or marked as disabled in its manifest. The components of a disabled application are also
        considered disabled by the system (and App Manager).
    \end{tip}

    \item \colorbox{AMVividOrange}{\textcolor{black}{Vivid orange (day)}} / \colorbox{AMVeryDarkOrange}{
        \textcolor{white}{very dark orange (night)}} -- Denotes the tracker components

    \item \colorbox{AMSoftMagenta}{\textcolor{black}{Soft magenta (day)}} / \colorbox{AMVeryDarkViolet}{
        \textcolor{white}{very dark violet (night)}} -- Denotes the running services.
\end{itemize}</string>
    <string name="pages_appdetails-app-info-tab">\textbf{App Info} tab contains general information about an application. It also lists many actions that can be
performed within this tab.</string>
    <string name="pages_appdetails-app-info-general-information">The list below is in the same order as listed in the App Info tab.
\begin{itemize}
    \item \textbf{App Icon.} The application icon. If an app doesn\'t have an icon, the system default icon is displayed.

    \item \textbf{App Label.} The application label or application name.

    \item \textbf{Version.} Application version is divided into two parts. The first part is called \textit{version
    name}, the format of this part varies but it often consists of multiple integers separated by dots. The second part
    is called \textit{version code} and it is closed under first brackets. Version code is an integer which is usually
    used to differentiate between app versions (as version name can often be unreadable by a machine). In general, new
    version of an app has higher version code than the old ones. For instance, if \texttt{123} and \texttt{125} are two
    version codes of an app, we can say that the latter is more updated than the former because the version code of the
    latter is higher. For applications that depend on platforms (mobile, tabs, desktops, etc.), these version numbers
    can be misleading as they use prefixes for each platform.

    \item \textbf{Tags.} (Also known as tag clouds) Tags include the basic, concise and most useful info of an app.
    Tags contain \textit{tracker info} (i.e.\ number of tracker components), \textit{app type} (user app or system app
    and whether the app is an updated version of the system app or if the app is installed systemless-ly using Magisk),
    \textit{running} (i.e. one or more services of the app is running in the background), \textit{split APK info} (i.e.
    \ number of splits), \textit{debuggable} (the app is a debug version), \textit{test only} (the app is a test only
    app), \textit{large heap} (the app has requested a large heap size), \textit{stopped} (the app is force stopped),
    \textit{disabled} (the app is disabled), \textit{KeyStore} (the app has items in the Android KeyStore),
    \textit{no code} (the app doesn\'t have any code associated with it), \hyperref[sec:terminologies]{\textit{SSAID}},
    \textit{netpolicy} (network policy such as background data usage), and \textit{battery optimization}.
    The importance of including \textit{test only} and \textit{debuggable} is that app with these properties can do
    additional tasks or these apps can be \texttt{run-as} without root which can cause potential security problems
    if these apps store any private information.
    \textit{Large heap} denotes that the app will be allocated a higher amount of memory (RAM) if needed.
    While this may not be harmful for most cases, any suspicious apps requesting large heap should be taken seriously.

    \item \textbf{Horizontal Action Panel.} This is an action panel containing various actions regarding the app. See
    ยง\cref{subsubsec:horizontal-action-panel} for a complete list of actions available here.

    \item \textbf{Paths \&amp; Directories.} Contains various information regarding application paths including \textit{app
    directory} (where the APK files are stored), \textit{data directories} (internal, device protected and externals),
    \textit{split APK directories} (along with the split names), and \textit{native JNI library} (if present). JNI
    libraries are used to invoke native codes usually written in C/C++. Use of native library can make the app run
    faster or help an app use third-party libraries written using languages other than Java like in most games. You can
    also open these directories using your favourite file managers (provided they support it and have necessary
    permissions) by clicking on the launch icon on the right-hand side of each item.

    \item \textbf{Data Usage Since Last Boot.} A rather self explanatory option. But beware that due to some issues, the
    results might often be misleading and simply wrong. This part remains hidden if \textit{Usage Access} permission is
    not granted in newer devices.

    \item \textbf{Storage \&amp; Cache.} Displays information regarding the size of the app (APK files), data and cache. In
    older devices, size of external data, cache, media and OBB folders are also displayed. This part remains hidden if
    \textit{Usage Access} permission is not granted in newer devices.

    \item \textbf{More Info.} Displays other information such as--
    \begin{itemize}
        \item \textbf{SDK.} Displays information related to the Android SDK. There are two (one in old devices) values:
        \textit{Max} denotes the target SDK and \textit{Min} denotes the minimum SDK (the latter is not available in old
        devices). It is best practice to use apps with maximum SDK that the platform currently supports. SDK is also
        known as \textbf{API Level}.
        \seealsoinline{\href{https://en.wikipedia.org/wiki/Android_version_history\#Overview}{Android Version History}}

        \item \textbf{Flags.} The application flags used at the time of building the app. For a complete list of flags
        and what they do, visit the
        \href{https://developer.android.com/reference/android/content/pm/ApplicationInfo\#flags}{official documentation}.

        \item \textbf{Date Installed.} The date when the app was first installed.

        \item \textbf{Date Updated.} The date when the app was last updated. This is the same as \textit{Date Installed}
        if the app hasn\'t been updated.

        \item \textbf{Installer App.} The app that installed this app. Not all app supply the information used by the
        package manager to register the installer app. Therefore, this value should not be taken for granted.

        \item \textbf{User ID.} The unique user ID set by the Android system to the app. For shared applications, same
        user ID is assigned to multiple applications that have the same \textit{Shared User ID}.

        \item \textbf{Shared User ID.} Applicable for applications that are shared together. Although it says ID, this
        is actually a string value. The shared application must have the same
        \hyperref[subsec:signatures-tab]{signatures}.

        \item \textbf{Main Activity.} The main entry point to the app. This is only visible if the app has
        \hyperref[subsubsec:activities]{activities} and any of those are openable from the Launcher. There\'s also a
        launch button on the right-hand side which can be used to launch this activity.
    \end{itemize}
\end{itemize}</string>
    <string name="pages_appdetails-horizontal-action-panel">Horizontal Action Panel, as described in the previous section, consists of various app-related actions, such as--
\begin{itemize}
    \item \textbf{Launch.} Application that has a launcher \hyperref[subsubsec:activities]{activities} can be launched
    using this button.

    \item \textbf{Disable.} Disable an app. This button is not displayed for already disabled apps or to users who do
    not have root or \hyperref[sec:adb-over-tcp]{ADB}. If you disable an app, the app will not be displayed in your
    Launcher app. Shortcuts for the app will also be removed. If you disable a user app, you can only enable them via
    App Manager or any other tool that supports it. There isn\'t any option in Android Settings to enable a disabled user
    app.

    \item \textbf{Uninstall.} Uninstall an app.

    \item \textbf{Enable.} Enable an app. This button is not displayed for already enabled apps or to users who do not
    have root or ADB\\@.

    \item \textbf{Force Stop.} Force-stop an app. When you force stop an app, the app will not be able to run in
    background unless you explicitly open it first. However, this is not always true.

    \item \textbf{Clear Data.} Clear data from an app. This includes any information stored in the internal and often
    the external directories, including accounts (if set by the app), cache, etc. Clearing data from App Manager, for
    example, removes all the rules (the blocking is not removed though) saved within the app. Which is why you should
    always take backups of your rules. This button is not displayed to users who do not have root or ADB\\@.

    \item \textbf{Clear Cache.} Clear app cache only. There is not any Android-way to clear app cache. Therefore, it
    needs root permission to clear cache from the app\'s internal storage.

    \item \textbf{Install.} Install an APK opened using any third-party app. This button is only displayed for an
    external APK that hasn\'t been installed.

    \item \textbf{What\'s New.} This button is displayed for an APK that has higher version code than the installed one.
    Clicking on this button displays a dialog consisting of differences in a version control manner. The information it
    displays include \textit{version}, \textit{trackers}, \textit{permissions}, \textit{components}, \textit{signatures}
    (checksum changes), \textit{features}, \textit{shared libraries} and \textit{SDK}.

    \item \textbf{Update.} Displayed for an app that has a higher version code than the installed app.

    \item \textbf{Reinstall.} Displayed for an app that has the same version code as the installed app.

    \item \textbf{Downgrade.} Displayed for an app that has a lower version code than the installed app.

    \item \textbf{Manifest.} Clicking on this button displays the app\'s manifest file in a separate page. The manifest
    file can be wrapped or unwrapped using the corresponding toggle button (on the top-right side) or can be saved to
    you shared storage using the save button.

    \item \textbf{Scanner.} Clicking on this button displays the app\'s tracker and library information. At first, it
    scans the app to extract a list of classes. Then the class list is matched with a number of signatures. After that,
    a scan summary is displayed.\\
    \seealsoinline{\hyperref[sec:scanner-page]{Scanner page}}

    \item \textbf{Shared Prefs.} Clicking on this button displays a list of shared preferences used by the app. Clicking
    on a preference item in the list opens the \hyperref[sec:shared-preferences-editor-page]{Shared Preferences Editor
    page}. This option is only visible to the root users.

    \item \textbf{Databases.} Clicking on this button displays a list of databases used by the app. This needs more
    improvements, and a database editor which might be added in the future. This option is only visible to the root users.

    \item \textbf{F-Droid.} Opens the app in your favourite \textit{F-Droid} client.

    \item \textbf{Store.} Opens the app in \textit{Aurora Store}. The option is only visible if \textit{Aurora Store} is
    installed.
\end{itemize}</string>
    <string name="pages_appdetails-app-info-options-menu">Options-menu is located in the top-right corner of the page. A complete description of the options present there are
given below:
\begin{itemize}
    \item \textbf{Share.} Share button can be used to share the APK file or \textit{APKS} file (if the app is has
    multiple splits) can be imported into \href{https://github.com/Aefyr/SAI}{SAI}. You can share it with your favourite
    file manager to save the file in your shared storage.

    \item \textbf{Refresh.} Refreshes the App Info tab.
    \item \textbf{View in Settings.} Opens the app in Android Settings.
    \item \textbf{Backup/Restore.} Opens the backup/restore dialog.
    \item \textbf{Export Blocking Rules.} Export rules configured for this app within App Manager.

    \item \textbf{Open in Termux.} Opens the app in Termux. This actually runs \texttt{su - user\_id} where
    \texttt{user\_id} denotes the app\'s kernel user ID (described in the
    \hyperref[subsubsec:app-info-general-information]{General Information section}). This option is only visible to the
    root users. See ยง\cref{subsubsec:config-termux} to learn how to configure Termux to run commands from third-party applications.

    \item \textbf{Run in Termux.} Open the app using \texttt{run-as package\_name} in Termux. This is only applicable
    for the debuggable apps and works for both root and ADB users. See ยง\cref{subsubsec:config-termux} to learn how to
    configure Termux to run commands from third-party applications.

    \item \textbf{Extract Icon.} Extract and save the app\'s icon in your desired location.
\end{itemize}</string>
    <string name="pages_appdetails-config-termux">By default, Termux does not allow running commands from third-party applications. To enable this option, you have to add
\texttt{allow-external-apps=true} in \texttt{\textasciitilde/.termux/termux.properties}, and make sure that you are
running Termux v0.96 or later.

\begin{tip}{Info}
    Enabling this option does not weaken your Termux\' security. The third-party apps still need to request the user to
    allow running arbitrary commands in Termux like any other dangerous permissions.
\end{tip}</string>
    <string name="pages_appdetails-component-tabs">\textbf{Activities}, \textbf{Services}, \textbf{Receivers} (originally \textit{broadcast receivers}) and
\textbf{Providers} (originally \textit{Content Providers}) are together called the application components. This is
because they share similar features in many ways. For example, they all have a \textit{name} and a \textit{label}.
Application components are the building blocks of any application, and most of these have to declared in the application
manifest. Application manifest is a file where application specific metadata are stored. The Android operating system
learns what to do with an app by reading the metadata. Colours used in these tabs are explained in
ยง\cref{subsec:app-details-colour-codes}. You also have the ability to sort the list of components to display blocked or
tracker components on top of the list using the \textbf{Sort} option in the overflow menu.</string>
    <string name="pages_appdetails-activities">\textbf{Activities} are windows or pages that you can browse (for instance \textit{Main page} and \textit{App Details
page} are two separate activities). In other words, an activity is a user interface (UI) component. Each activity can
have multiple UI components known as \textit{widgets} or \textit{fragments}, and similarly, each of these latter
components can have multiple of them nested or on top of each other. But an activity is the \textit{master} component:
There cannot be two nested activities. An application author can also choose to open external files within an activity
using a method called \textit{intent filters}. When you try to open a file using your file manager, either your file
manager or system scans for intent filters to decide which activities can open that particular file and offers you to
open the file with these activities (therefore, it is nothing to do with the application itself). There are other intent
filters as well.

Activities which are \textit{exportable} can be usually opened by any third-party apps (some activities require
permissions, if that is the case, only an app having those permissions can open them). In the \textit{Activities} tab,
the name of the activity (on top of each list item) is actually a button. It is enabled for the \textit{exportable}
activities and disabled for others (root users can open any activities). You can click on the button to open the
activity directly in App Manager. You can also open the Interceptor page by long clicking on an activity. Currently, it
only works for \textit{exportable} activities.

\begin{warning}{Notice}
    If you are not able to open any activity, chances are it has certain dependencies which are not met, e.g.\ you
    cannot open  \textit{App Details Activity} because it requires that you at least supply a package name. These
    dependencies cannot always be inferred programmatically. Therefore, you cannot open them using App Manager.
\end{warning}

You can also create shortcut for these \textit{exportable} activities (using the dedicated button), and if you want, you
can edit the shortcut as well using the \textit{Edit Shortcut} button.

\begin{danger}{Caution}
    If you uninstall App Manager, all shortcuts created by App Manager will be lost.
\end{danger}</string>
    <string name="pages_appdetails-servcies">Unlike \hyperref[subsubsec:activities]{activities} which users can see, \textbf{Services} handle background tasks. If
you\'re, for example, downloading a video from the internet using your phone\'s Internet browser, the Internet browser is
using a foreground service to download the content.

When you close an activity, it usually gets destroyed immediately (depending on many factors such as how much free
memory your phone has). But services can be run for indefinite periods if desired. If more services are running in
background, your phone will get slower due to shortage of memory and/or processing power, and your phone\'s battery can
be drained more quickly. Newer Android versions have a battery optimisation feature enabled by default for all apps.
With this feature enabled, the system can randomly terminate any service.

By the way, both activities and services are run in the same \href{https://stackoverflow.com/questions/7597742}{looper}
called the main looper, which means the services are not really run in the background. It\'s the application authors job
to ensure that. How do application communicate with services\? They use
\hyperref[subsubsec:app-details-receivers]{broadcast receivers}.</string>
    <string name="pages_appdetails-app-details-receivers">\textbf{Receivers} (also called \textit{broadcast receivers}) can be used to trigger execution of certain tasks for
certain events. These components are called broadcast receivers because they are executed as soon as a broadcast message
is received. These broadcast messages are sent using a method called intent. Intent is a special feature for Android
which can be used to open applications, activities, services and send broadcast messages. Therefore, like
\hyperref[subsubsec:activities]{activities}, broadcast receivers use intent filters to receive only the desired
broadcast message(s). Broadcast messages can be sent by either system or the app itself. When a broadcast message is
sent, the corresponding receivers are awakened by the system so that they can execute tasks. For example, if you have
low memory, your phone may freeze or experience lags for a moment after you enable mobile data or connect to the Wifi.
Ever wondered why\? This is because broadcast receivers that can receive `android.net.conn.CONNECTIVITY\_CHANGE` are
awakened by the system as soon as you enable data connection. Since many apps use this intent filter, all of these apps
are awakened almost immediately by the system which causes the freeze or lags. That being said, receivers can be used
for inter-process communication (IPC), i.e., it helps you communicate between different apps (provided you have the
necessary permissions) or even different components of a single app.</string>
    <string name="pages_appdetails-providers">\textbf{Providers} (also called \textit{content providers}) are used for data management. For example, when you save an
apk file or export rules in App Manager, it uses a content provider called `androidx.core.content.FileProvider` to save
the APK or export the rules. There are other content providers or even custom ones to manage various content-related
tasks such as database management, tracking, searching, etc. Each content provider has a field called \textit{Authority}
which is unique to that particular app in the entire Android eco-system just like the package name.</string>
    <string name="pages_appdetails-additionalrootfeatures">Unlike non-root users who are mostly spectators in these tabs, root users can perform various operations.</string>
    <string name="pages_appdetails-blockedcomponents">On the right-most side of each component item, there is a ``block\'\' icon (which becomes a ``unblock/restore\'\' icon when
the component is being blocked). This icon (actually, a button) can be used to toggle the blocking status of that
particular component. If you do not have \hyperref[subsubsec:instant-component-blocking]{Instant Component Blocking}
enabled or haven\'t applied blocking for the app before, you have to apply the changes using the \textbf{Apply rules}
option in three-dots menu. You can also remove already applied rules using the same option (which would be read as
\textbf{Remove rules} this time).

\seealsoinline{\hyperref[sec:faq:app-components]{FAQ: App Components}}</string>
    <string name="pages_appdetails-blocking-trackers">You can disable tracker components using the \textbf{Block tracker} option in the three-dots menu. All tracker
components will be blocked regardless of the tab you\'re currently in.

\begin{tip}{Info}
    Tracker components are a subset of app components. Therefore, they are blocked using the same method used for
    blocking any other components.
\end{tip}

\begin{amseealso}
    \item \hyperref[subsec:tracker-classes-versus-tracker-components]{FAQ: Tracker classes versus tracker components}
    \item \hyperref[sec:scanner-page]{Scanner Page}
    \item \hyperref[subsec:block-unblock-trackers]{1-Click Ops Page: Block/Unblock Trackers}
\end{amseealso}</string>
    <string name="pages_appdetails-permission-tabs">\textbf{App Ops}, \textbf{Uses Permissions} and \textbf{Permissions} tabs are related to permissions. In Android
communication between apps or processes which do not have the same identity (known as \textit{shared id}) often require
permission(s). These permissions are managed by the permission controller. Some permissions are considered
\textit{normal} permissions which are granted automatically if they appear in the application manifest, but
\textit{dangerous} and \textit{development} permissions require confirmation from the user. Colours used in these tabs
are explained in ยง\cref{subsec:app-details-colour-codes}.</string>
    <string name="pages_appdetails-app-ops">\textbf{App Ops} stands for \textbf{Application Operations}.
Since Android 4.3, \textit{App Ops} are used by Android system to control most of the application permissions.
Each app op has a unique number associated with them which are closed inside first brackets in the App Ops tab.
They also have a private and optionally, a public name.
Some app ops are also associated with \textit{permissions}.
The dangerousness of an app op is decided based on the associated permission, and other information such as
\textit{flags}, \textit{permission name}, \textit{permission description}, \textit{package name}, \textit{group} are
taken from the associated \hyperref[subsubsec:permissions]{permission}.
Other information may include the following:
\begin{itemize}
    \item \textbf{Mode.} It describes the current authorisation status which can be \textit{allow}, \textit{deny} (a
    rather misnomer, it simply means error), \textit{ignore} (it actually means deny), \textit{default} (inferred from
    a list of defaults set internally by the vendor), \textit{foreground} (in newer Androids, it means the app op can
    only be used when the app is running in foreground), and some custom modes set by the vendors (MIUI uses
    \textit{ask}, for instance).

    \item \textbf{Duration.} The amount of time this app op has been used (there can be negative durations whose use
    cases are currently unknown to me).

    \item \textbf{Accept Time.} Last time the app op was accepted.

    \item \textbf{Reject Time.} Last time the app op was rejected.
\end{itemize}

\begin{tip}{Info}
    Contents of this tab are visible to no-root users if \texttt{android.permission.GET\_APP\_OPS\_STATS} is granted via ADB\\@.
\end{tip}

There is a toggle button next to each app op item which can be used to allow or deny (ignore) the app op.
If you need to set other modes available to your device, simply long click on an item.
If you need to set additional app ops that are not listed in the tab, use the \textit{Set custom app op} option in the menu.
You can also reset your changes using the \textit{Reset to default} option or deny all dangerous app ops using the
corresponding option in the menu.
You can also sort them in ascending order by app op names and the associated unique numbers (or values).
You can also list the denied app ops first using the corresponding sorting option.

\begin{warning}{Warning}
    Denying an app op may cause the app to misbehave.
    Use the \textit{reset to default} option if that is the case.
    Due to the nature how app ops work, the system may take some time to apply them.
\end{warning}

\seealsoinline{\hyperref[ch:app-ops]{Appendix: App Ops}}</string>
    <string name="pages_appdetails-usespermissions">\textbf{Uses Permissions} are the permissions used by the application. This is named so because they are declared in the
manifest using \texttt{uses-permission} tags. Information such as \textit{flags}, \textit{permission name},
\textit{permission description}, \textit{package name}, \textit{group} are taken from the associated
\hyperref[subsubsec:permissions]{permission}.

\textbf{Root and ADB users} can grant or revoke the \textit{dangerous} and \textit{development} permissions using
the toggle button on the right side of each permission item. They can also revoke dangerous permissions all at once
using the corresponding option in the menu. Only these two types of permissions can be revoked because Android doesn\'t
allow modifying \textit{normal} permissions (which most of them are). The only alternative is to edit the app manifest
and remove these permissions from there.

\begin{tip}{Info}
    Since dangerous permissions are revoked by default by the system, revoking all dangerous permissions is the same as
    resetting all permissions.
\end{tip}

\begin{tip}{Notice}
    Permissions cannot be changed for apps targeting API 23 or earlier. Therefore, permission toggles are disabled for
    such apps.
\end{tip}

Users can sort the permissions by permission name (in ascending order) or choose to display denied or dangerous
permissions at first using the corresponding options in the menu.</string>
    <string name="pages_appdetails-permissions">\textbf{Permissions} are usually custom permissions defined by the app itself. It could contain regular permissions as
well, mostly in old applications. Here\'s a complete description of each item that is displayed there:
\begin{itemize}
    \item \textbf{Name.} Each permission has a unique name like \texttt{android.permission.INTERNET} but multiple app
    can request the permission.

    \item \textbf{Icon.} Each permission can have a custom icon. The other permission tabs do not have any icon because
    they do not contain any icon in the app manifest.

    \item \textbf{Description.} This optional field describes the permission. If there isn\'t any description associated
    with the permission, the field is not displayed.

    \item \textbf{Flags.} (Uses the flag symbol or \textbf{Protection Level} name) This describes various permission flags such
    as \textit{normal}, \textit{development}, \textit{dangerous}, \textit{instant}, \textit{granted}, \textit{revoked},
    \textit{signature}, \textit{privileged}, etc.

    \item \textbf{Package Name.} Denotes the package name associated with the permission, i.e.\ the package that defined
    the permission.

    \item \textbf{Group.} The group name associated with the permission (if any). Newer Androids do not seem to use
    group names which is why you\'ll usually see \texttt{android.permission-group.UNDEFINED} or no group name at all.
\end{itemize}</string>
    <string name="pages_appdetails-signatures-tab_1">\textbf{Signatures} are actually called signing info. An application is signed by one or more singing certificates by
the application developers before publishing it. The integrity of an application (whether the app is from the actual
developer and isn\'t modified by other people) can be checked using the signing info; because when an app is modified by
a third-party unauthorised person, the app cannot be signed using the original certificate(s) again because the signing
info are kept private by the actual developer. \textit{How do you verify these signatures\?} Using checksums. Checksums
are generated from the certificates themselves. If the developer supplies the checksums, you can match the checksums
using the different checksums generated in the \textbf{Signatures} tab. For example, if you have downloaded App Manager
from Github, Telegram Channel or IzzyOnDroid\'s repo, you can verify whether the app is actually released by me by simply
matching the following \textit{SHA256} checksum with the one displayed in this tab:</string>
    <string name="pages_appdetails-signatures-tab_2">There are three types of checksums displayed there: \textit{MD5}, \textit{SHA1} and \textit{SHA256}.

\begin{danger}{Caution}
    It is recommended that you verify signing info using only \textit{SHA256} checksums or all three of them. DO NOT
    rely on \textit{MD5} or \textit{SHA1} checksums only as they are known to generate the same results for multiple
    certificates.
\end{danger}</string>
    <string name="pages_appdetails-other-tabs">Other tabs list android manifest components such as features, configurations, shared libraries, and signatures. A
complete description about these tabs will be available soon.</string>
    <string name="pages_oneclickops-section==title">1-Click Ops Page</string>
    <string name="pages_oneclickops-block-unblock-trackers==title">Block/Unblock Trackers</string>
    <string name="pages_oneclickops-block-components-dots==title">Block Components\dots</string>
    <string name="pages_oneclickops-set-mode-for-app-ops-dots==title">Set Mode for App Ops\dots</string>
    <string name="pages_oneclickops-1-click-back-up==title">Back up</string>
    <string name="pages_oneclickops-1-click-restore==title">Restore</string>
    <string name="pages_oneclickops-section">This page appears after clicking on the \hyperref[subsubsec:main:1-click-ops]{1-Click Ops option} in the
\hyperref[subsec:main-page-options-menu]{main menu}.</string>
    <string name="pages_oneclickops-block-unblock-trackers">This option can be used to block or unblock the ad/tracker components from the installed apps.
After you click on this option, you will be asked to select if AM will list trackers from all apps or only from the user apps.
Novice users should avoid blocking trackers from the system apps in order to avoid consequences.
After that, a multi-choice dialog box will appear where you can deselect the apps you want to exclude from this operation.
Clicking \textit{block} or \textit{unblock} applies the changes immediately.

\begin{warning}{Notice}
    Certain apps may not function as expected after applying the blocking.
    If that is the case, remove blocking rules all at once or one by one in the component tabs of the corresponding \hyperref[sec:app-details-page]{App Details page}.
\end{warning}

\begin{amseealso}
    \item \hyperref[subsec:faq:how-to-unblock-tracker-components]{How to unblock the tracker components blocked using 1-Click Ops or Batch Ops\?}
    \item \hyperref[par:appdetails:blocking-trackers]{App Details Page: Blocking Trackers}
\end{amseealso}</string>
    <string name="pages_oneclickops-block-components-dots">This option can be used to block certain app components denoted by the signatures.
App signature is the full name or partial name of the components.
For safety, it is recommended that you should add a \texttt{.} (dot) at the end of each partial signature name as the algorithm used here chooses all matched components in a greedy manner.
You can insert more than one signature in which case all signatures have to be separated by spaces.
Similar to the option above, there is an option to apply blocking to system apps as well.

\begin{danger}{Caution}
    If you are not aware of the consequences of blocking app components by signature(s), you should avoid using this
    setting as it may result in boot loop or soft brick, and you may have to apply factory reset in order to use your OS\\@.
\end{danger}</string>
    <string name="pages_oneclickops-set-mode-for-app-ops-dots">This option can be used to configure certain \hyperref[ch:app-ops]{app operations} of all or selected apps.
You can insert more than one app op constants separated by spaces.
It is not always possible to know in advance about all the app op constants as they vary from device to device and from OS to OS\\@.
To find the desired app op constant, browse the \textit{App Ops} tab in the \hyperref[sec:app-details-page]{App Details page}.
The constants are integers closed inside brackets next to each app op name.
You can also use the app op names.
You also have to select one of the \hyperref[subsec:mode-constants]{modes} that will be applied against the app ops.

\begin{danger}{Caution}
    Unless you are well-informed about app ops and the consequences of blocking them, you should avoid using this
    feature as it may result in boot loop or soft brick, and you may have to apply factory reset in order to use your OS\\@.
\end{danger}</string>
    <string name="pages_oneclickops-1-click-back-up">1-Click options for back up.
As a precaution, it lists the affected backups before performing any operation.

\paragraph{Back up all apps.} Back up all the installed apps.

\paragraph{Redo existing backups.} Back up all the installed apps that have a previous backup.

\paragraph{Back up apps without backups.} Back up all the installed apps without a previous backup.

\paragraph{Verify and redo backups.} Verify the recently made backups of the installed apps and redo backup if necessary.

\paragraph{Back up apps with changes.} If an app has changed since the last backup, redo backup for it.
It checks a number of indices including app version, last update date, last launch date, integrity and file hashes.
Directory hashes are taken during the back up and stored in a database.
On running this operation, new hashes are taken and compared with the ones kept in the database.</string>
    <string name="pages_oneclickops-1-click-restore">1-Click options for restore.
As a precaution, it lists the affected backups before performing any operation.

\paragraph{Restore all apps.} Restore \textit{base backup} of all the backed up apps.

\paragraph{Restore not installed apps.} Restore \textit{base backup} of all the backed up apps that are not currently installed.

\paragraph{Restore latest backups.} Restore \textit{base backup} of already installed apps whose version codes are higher than the installed version code.</string>
    <string name="pages_profilespage-section==title">Profiles Page</string>
    <string name="pages_profilespage-profiles-options-menu==title">Options Menu</string>
    <string name="pages_profilespage-section">Profiles page can be accessed from the options-menu in the main page. It displays a list of configured profiles.
Profiles can be added using the \textit{plus} button at the bottom-right corner, imported from the import option,
created from one of the presets or even duplicated from an already existing profile. Clicking on any profile opens the
\hyperref[sec:profile-page]{profile page}.</string>
    <string name="pages_profilespage-profiles-options-menu">There are two options menu in this page. The three dots menu at the top-right offers two options such as
\textit{presets} and \textit{import}.
\begin{itemize}
    \item \textbf{Presets.} Presets option lists a number of built-in profiles that can be used as a starting point.
    The profiles are generated from the project \href{https://gitlab.com/W1nst0n/universal-android-debloater}{Universal
    Android Debloater}.\\
    \seealsoinline{\hyperref[subsec:faq:what-are-bloatware]{FAQ: What are bloatware and how to remove them\?}}

    \item \textbf{Import.} This option can be used to import an existing profile.
\end{itemize}

Another options menu appears when you long click on any profile. They have options such as--
\begin{itemize}
    \item \textbf{Apply now\dots.} This option can be used to apply the profile directly. When clicked, a dialog will be
    displayed where you can select a \hyperref[subsubsec:profile-state]{profile state}. On selecting one of the options,
    the profile will be applied immediately.
    \item \textbf{Delete.} Clicking on delete will remove the profile immediately without any warning.
    \item \textbf{Duplicate.} This option can be used to duplicate the profile. When clicked, an input box will be
    displayed where you can set the profile name. If you click ``OK\'\', a new profile will be created and the
    \hyperref[sec:profile-page]{profile page} will be loaded. The profile will not be saved until you save it manually.
    \item \textbf{Export.} Export the profile to an external storage. Profile exported this way can be imported using
    the \textit{import} option in the three dots menu.
    \item \textbf{Create shortcut.} This option can be used to create a shortcut for the profile. When clicked, there
    will be two options: \textit{Simple} and \textit{Advanced}. The latter option allows you to set the profile state
    before applying it while the former option use the default state that was configured when the profile was last saved.
\end{itemize}</string>
    <string name="pages_profilepage-section==title">Profile Page</string>
    <string name="pages_profilepage-profile-options-menu==title">Options Menu</string>
    <string name="pages_profilepage-profile-apps-tab==title">Apps Tab</string>
    <string name="pages_profilepage-profile-configurations-tab==title">Configurations Tab</string>
    <string name="pages_profilepage-comment==title">Comment</string>
    <string name="pages_profilepage-profile-state==title">State</string>
    <string name="pages_profilepage-users==title">Users</string>
    <string name="pages_profilepage-components==title">Components</string>
    <string name="pages_profilepage-appops==title">App Ops</string>
    <string name="pages_profilepage-permission==title">Permissions</string>
    <string name="pages_profilepage-backuprestore==title">Backup/Restore</string>
    <string name="pages_profilepage-exportblockingrules==title">Export Blocking Rules</string>
    <string name="pages_profilepage-disable==title">Disable</string>
    <string name="pages_profilepage-forcestop==title">Force-stop</string>
    <string name="pages_profilepage-clearcache==title">Clear Cache</string>
    <string name="pages_profilepage-cleardata==title">Clear Data</string>
    <string name="pages_profilepage-blocktrackers==title">Block Trackers</string>
    <string name="pages_profilepage-saveapk==title">Save APK</string>
    <string name="pages_profilepage-section">Profile page displays the configurations for a profile. It also offers editing them.

\begin{tip}{Notice}
    When you apply a profile, if some packages do not match the criteria, they will simply be ignored.
\end{tip}</string>
    <string name="pages_profilepage-profile-options-menu">The three dots menu on the top-right corner opens the options-menu. It contains several options such as--
\begin{itemize}
    \item \textbf{Apply.} This option can be used to apply the profile. When clicked, a dialog will be displayed where
    you can select a \hyperref[subsubsec:profile-state]{profile state}. On selecting one of the options, the profile
    will be applied immediately.
    \item \textbf{Save.} Allows you to save the profile.
    \begin{warning}{Notice}
        Changes are never saved automatically. You have to save them manually from here.
    \end{warning}
    \item \textbf{Discard.} Discard any modifications made since the last save.
    \item \textbf{Delete.} Clicking on delete will remove the profile immediately without any warning.
    \item \textbf{Duplicate.} This option can be used to duplicate the profile. When clicked, an input box will be
    displayed where you can set the profile name. If you click ``OK\'\', a new profile will be created, and the page will be
    reloaded. The profile will not be saved until you save it manually.
    \item \textbf{Create shortcut.} This option can be used to create a shortcut for the profile. When clicked, there
    will be two options: \textit{Simple} and \textit{Advanced}. The latter option allows you to set the profile state
    before applying it while the former option uses the default state that was configured when the profile was last saved.
\end{itemize}</string>
    <string name="pages_profilepage-profile-apps-tab">Apps tab lists the packages configured under this profile. Packages can be added or removed using the \textit{plus}
button located near the bottom of the screen. Packages can also be removed by long clicking on them (in which case, a
popup will be displayed with the only option \textit{delete}).</string>
    <string name="pages_profilepage-profile-configurations-tab">Configurations tab can be used to configure the selected packages. Description of each item is given below:</string>
    <string name="pages_profilepage-comment">This is the text that will be displayed in the \hyperref[sec:profiles-page]{profiles page}. If not set, the current
configurations will be displayed instead.</string>
    <string name="pages_profilepage-profile-state">Denotes how certain configured options will behave. For instance, if \textit{disable} option is turned on, the apps will
be disabled if the state is \textit{on} and will be enabled if the state is \textit{off}. Currently state only support
\textit{on} and \textit{off} values.</string>
    <string name="pages_profilepage-users">Select users for which is the profile will be applied. All users are selected by default.</string>
    <string name="pages_profilepage-components">This behaves the same way as the \hyperref[subsec:block-components-dots]{Block Components\dots} option does in the
1-Click Ops page. However, this only applies for the selected packages. If the \hyperref[subsubsec:profile-state]{state}
is \textit{on}, the components will be blocked, and if the state is \textit{off}, the components will be unblocked.
The option can be disabled (regardless of the inserted values) by clicking on the \textit{disabled} button on the input
dialog.

\seealsoinline{\hyperref[subsec:faq:what-are-app-components]{What are the app components\?}}</string>
    <string name="pages_profilepage-appops">This behaves the same way as the \hyperref[subsec:set-mode-for-app-ops-dots]{Set Mode for App Ops\dots} option does in
the 1-Click Ops page. However, this only applies for the selected packages. If the
\hyperref[subsubsec:profile-state]{state} is \textit{on}, the app ops will be denied (ie. ignored), and if the state is
\textit{off}, the app ops will be allowed. The option can be disabled (regardless of the inserted values) by clicking
on the \textit{disabled} button on the input dialog.</string>
    <string name="pages_profilepage-permission">This option can be used to grant or revoke certain permissions from the selected packages. Like others above,
permissions must be separated by spaces. If the \hyperref[subsubsec:profile-state]{state} is \textit{on}, the
permissions will be revoked, and if the state is \textit{off}, the permissions will be allowed. The option can be
disabled (regardless of the inserted values) by clicking on the \textit{disabled} button on the input dialog.</string>
    <string name="pages_profilepage-backuprestore">This option can be used to take a backup of the selected apps and its data or restore them. There two options available
there: \textit{Backup options} and \textit{backup name}.
\begin{itemize}
    \item \textbf{Backup options.} Same as the \hyperref[subsec:backup-restore-backup-options]{backup options} of the
    backup/restore feature. If not set, the default options will be used.
    \item \textbf{Backup name.} Set a custom name for the backup. If the backup name is set, each time a backup is made,
    it will be given a unique name with backup-name as the suffix. This behaviour will be fixed in a future release.
    Leave this field empty for regular or ``base\'\' backup (also, make sure not to enable \textit{backup multiple} in the
    backup options).
\end{itemize}

If the \hyperref[subsubsec:profile-state]{state} is \textit{on}, the packages will be backed up, and if the state is
\textit{off}, the packages will be restored. The option can be disabled by clicking on the \textit{disabled} button on
the input dialog.</string>
    <string name="pages_profilepage-exportblockingrules">This option allows you to export blocking rules.

\begin{danger}{Danger}
    This option is not yet implemented.
\end{danger}</string>
    <string name="pages_profilepage-disable">Enables/disables the selected packages depending on the \hyperref[subsubsec:profile-state]{state}. If the state is
\textit{on}, the packages will be disabled, and if the state is \textit{off}, the packages will be enabled.</string>
    <string name="pages_profilepage-forcestop">Allows the selected packages to be force-stopped.</string>
    <string name="pages_profilepage-clearcache">Enables clearing cache for the selected packages.</string>
    <string name="pages_profilepage-cleardata">Enables clearing data for the selected packages.</string>
    <string name="pages_profilepage-blocktrackers">Enables blocking/unblocking of the tracker components from the selected packages depending on the
\hyperref[subsubsec:profile-state]{state}. If the state is \textit{on}, the trackers will be blocked, and if the state
is \textit{off}, the trackers will be unblocked.</string>
    <string name="pages_profilepage-saveapk">Enables saving APK files at \texttt{AppManager/apks} for the selected packages.</string>
    <string name="pages_settingspage-section==title">Settings Page</string>
    <string name="pages_settingspage-language==title">Language</string>
    <string name="pages_settingspage-app-theme==title">App Theme</string>
    <string name="pages_settingspage-screen-lock==title">Screen Lock</string>
    <string name="pages_settingspage-mode-of-operation==title">Mode of Operation</string>
    <string name="pages_settingspage-enabledisable-features==title">Enable/Disable Features</string>
    <string name="pages_settingspage-apk-signing==title">APK Signing</string>
    <string name="pages_settingspage-signatureschemes==title">Signature Schemes</string>
    <string name="pages_settingspage-signingkey==title">Signing Key</string>
    <string name="pages_settingspage-installer==title">Installer</string>
    <string name="pages_settingspage-showuserininstaller==title">Show users in installer</string>
    <string name="pages_settingspage-signapk==title">Sign APK</string>
    <string name="pages_settingspage-installlocation==title">Install location</string>
    <string name="pages_settingspage-installerapp==title">Installer App</string>
    <string name="pages_settingspage-backuprestore==title">Back up/Restore</string>
    <string name="pages_settingspage-compressionmethod==title">Compression method</string>
    <string name="pages_settingspage-settings-backup-options==title">Backup Options</string>
    <string name="pages_settingspage-backupappswithkeystore==title">Backup apps with Android KeyStore</string>
    <string name="pages_settingspage-settings-encryption==title">Encryption</string>
    <string name="pages_settingspage-backup-volume==title">Backup Volume</string>
    <string name="pages_settingspage-rules==title">Rules</string>
    <string name="pages_settingspage-instant-component-blocking==title">Instant Component Blocking</string>
    <string name="pages_settingspage-importexportblockingrules==title">Import/Export Blocking Rules</string>
    <string name="pages_settingspage-removeallrules==title">Remove all rules</string>
    <string name="pages_settingspage-importexport-keystore==title">Import/Export Keystore</string>
    <string name="pages_settingspage-device-info==title">About the device</string>
    <string name="pages_settingspage-section">Settings can be used to customise the behaviour of the app.</string>
    <string name="pages_settingspage-language">Configure in-app language.
App Manager currently supports 19 (nineteen) languages.</string>
    <string name="pages_settingspage-app-theme">Configure in-app theme.</string>
    <string name="pages_settingspage-screen-lock">Lock App Manager using Android screen lock provided a screen lock is configured.</string>
    <string name="pages_settingspage-mode-of-operation">You can select one of the four options:
\begin{itemize}
    \item \textbf{Auto.} Let AM decide the suitable option for you.
    Although this is the default option, it may cause problems in some devices.

    \item \textbf{Root.} Select root mode.
    By default, AM requests root permission if root is detected but hasn\'t been granted.
    If this option is selected, AM will run in root mode even if root is unavailable or denied.
    This may cause crashes or freezing issues, therefore, shouldn\'t be enabled if root is unavailable.

    \item \textbf{ADB over TCP.} Enable \hyperref[sec:adb-over-tcp]{ADB over TCP} mode.
    AM may hang indefinitely if ADB over TCP is not enabled.

    \item \textbf{No-root.} AM runs in no-root mode.
    AM performs better if this is enabled but all the root/ADB features will be disabled.
\end{itemize}</string>
    <string name="pages_settingspage-enabledisable-features">Enable or disable certain features in App Manager, such as
\begin{itemize}
    \item Interceptor
    \item Manifest viewer
    \item Scanner
    \item Package installer
    \item Usage access: With this option turned off, App Manager will never ask for the \textit{Usage Access} permission.
    \item Log viewer
\end{itemize}</string>
    <string name="pages_settingspage-signatureschemes">Select the \href{https://source.android.com/security/apksigning}{signature schemes} to use.
It is recommended that you use at least v1 and v2 signature schemes.
Use the \textit{Reset to Default} button in case you\'re confused.</string>
    <string name="pages_settingspage-signingkey">Configure custom signing key for signing APK files.
Keys from an existing KeyStore can be imported to App Manager, or a new key can be generated.

\begin{warning}{Notice}
    App Manager maintains a KeyStore where the keys used within the app are stored.
    The password for the keystore will be asked when necessary.
    Be sure to store the password in a safe place, otherwise the KeyStore cannot be recovered when necessary.
\end{warning}</string>
    <string name="pages_settingspage-showuserininstaller">For root/ADB users, a list of users will be displayed before installing the app.
The app will be installed only for the specified user (or all users if selected).</string>
    <string name="pages_settingspage-signapk">Whether to sign the APK files before installing the app.
Visit \hyperref[subsec:apk-signing]{APK signing} section to configure signing.</string>
    <string name="pages_settingspage-installlocation">Choose APK install location.
This can be one of \textit{auto}, \textit{internal only} and \textit{prefer external}.
In newer Android versions, the last option may not always install the app in the external storage.</string>
    <string name="pages_settingspage-installerapp">Select the installer app, useful for some apps which explicitly checks for their installer.
This only works for root/ADB users.</string>
    <string name="pages_settingspage-backuprestore">Settings related to \hyperref[sec:backup-restore]{back up/restore}.</string>
    <string name="pages_settingspage-compressionmethod">Set which compression method to be used during backups.
App Manager supports GZip and BZip2 compression methods, GZip being the default compression method.
It doesn\'t affect the restore of an existing backup.</string>
    <string name="pages_settingspage-settings-backup-options">Customise the back up/restore dialog.</string>
    <string name="pages_settingspage-backupappswithkeystore">Allow backup of apps that has entries in the Android KeyStore (disabled by default).
Some apps (such as Signal) may crash if restored.
KeyStore backup also doesn\'t work from Android 9 but still kept as many apps having KeyStore can be restored without problem.</string>
    <string name="pages_settingspage-settings-encryption">Set an encryption method for the backups.
App Manager currently supports OpenPGP (via
\href{https://f-droid.org/packages/org.sufficientlysecure.keychain/}{OpenKeyChain}), AES and RSA (hybrid encryption with
AES).
Like \hyperref[subsec:apk-signing]{APK signing}, The AES and RSA keys are stored in the KeyStore and can be imported
from other KeyStores.</string>
    <string name="pages_settingspage-backup-volume">Lets you select the storage where the backups will be stored.

\begin{tip}{Notice}
    The backup volume only specifies the storage, not the path.
    Backups are stored in \texttt{AppManager} folder inside the storage path.
    This is also where logs and exported APK files are saved.
\end{tip}</string>
    <string name="pages_settingspage-instant-component-blocking=">By default, blocking rules are not applied unless they are applied explicitly in \hyperref[sec:app-details-page]{the App
Details page} for any package.
Upon enabling this option, all (old and new) rules are applied immediately for all apps without explicitly enabling
blocking for an app.

\begin{warning}{Notice}
    Enabling this setting may have some unintended consequences.
    For instance, the rules that are not completely removed will be applied again.
    So, proceed with caution.
    This option should be kept disabled if not required for some reasons.
\end{warning}

\seealsoinline{\hyperref[subsec:faq:what-is-instant-component-blocking]{FAQ: What is instant component blocking\?}}</string>
    <string name="pages_settingspage-importexportblockingrules">It is possible to import or export blocking rules within App Manager for all apps.
There is a choice to export or import only certain rules (components, app ops or permissions) instead of all of them.
It is also possible to import blocking rules from \href{https://github.com/lihenggui/blocker}{Blocker} and
\href{https://github.com/tuyafeng/Watt}{Watt}.
If it is necessary to export blocking rules for a single app, use the corresponding \hyperref[sec:app-details-page]{App
Details page} to export rules, or for multiple apps, use \hyperref[subsec:batch-operations]{batch operations}.

\seealsoinline{\hyperref[sec:rules-specification]{Rules Specification}}

\paragraph{Export} Export blocking rules for all apps configured within App Manager.
This may include \hyperref[subsec:faq:what-are-app-components]{app components}, app ops and permissions based on the
options selected in the multi-choice options.

\paragraph{Import} Import previously exported blocking rules from App Manager.
Similar to export, this may include \hyperref[subsec:faq:what-are-app-components]{app components}, app ops and
permissions based on the options selected in the multi-choice options.

\paragraph{Import Existing Rules}\label{par:import-existing-rules}
\phantomsection
Add components disabled by other apps to App Manager.
App Manager only keeps track of component disabled within App Manager.
If you use other tools to block app components, you can use this tools to import these disabled components.
Clicking on this option triggers a search for disabled components and will list apps with components disabled by user.
For safety, all the apps are unselected by default.
You can manually select the apps in the list and re-apply the blocking through App Manager.

\begin{danger}{Caution}
    Be careful when using this tool as there can be many false positives.
    Choose only the apps that you are certain about.
\end{danger}

\paragraph{Import from Watt} Import configuration files from \href{https://github.com/tuyafeng/Watt}{Watt}, each file
containing rules for a single package and file name being the name of the package with \texttt{.xml} extension.

\begin{tip}{Tip}
    Location of configuration files in Watt: \texttt{/sdcard/Android/data/com.tuyafeng.watt/files/ifw}
\end{tip}

\paragraph{Import from Blocker} Import blocking rules from \href{https://github.com/lihenggui/blocker}{Blocker}, each
file containing rules for a single package.
These files have a \texttt{.json} extension.</string>
    <string name="pages_settingspage-removeallrules">One-click option to remove all rules configured within App Manager.
This will enable all blocked components, app ops will be set to their default values and permissions will be granted.</string>
    <string name="pages_settingspage-importexport-keystore">Import or export the KeyStore used by App Manager.
This is a Bouncy Castle KeyStore with \texttt{bks} extension.
Therefore, other KeyStore such as Java KeyStore (JKS) or PKCS \#12 are not supported.
If you need to import a key from these KeyStores, use the relevant options outlined above.</string>
    <string name="pages_settingspage-device-info">Display Android version, security, CPU, GPU, battery, memory, screen, languages, user info, etc.</string>
    <string name="pages_scannerpage-section==title">Scanner Page</string>
    <string name="pages_scannerpage-missing-signatures==title">Missing Signatures</string>
    <string name="pages_scannerpage-section">\textbf{Scanner page} appears after clicking on the \emph{scanner} button in the \hyperref[subsec:app-info-tab]{App Info
tab}. External APK files can also be opened for scanning from file managers, web browsers, etc.

It scans for trackers and libraries, and displays the number of trackers and libraries as a summary. It also displays
checksums of the APK file as well as the signing certificate(s).

\begin{danger}{Disclaimer}
    AM only scans an app statically without prejudice. The app may provide the options for opting out, or in some cases,
    certain features of the tracker may not be used at all by the app (e.g.\ F-Droid), or some apps may simply use them
    as placeholders to prevent the breaking of certain features (e.g.\ Fennec F-Droid). \textbf{The intention of the
    scanner is to give you an idea about what the APK might contain. It should be taken as an initial step for further
    investigations.}
\end{danger}

Clicking on the first item (i.e.\ number of classes) opens a new page containing a list of tracker classes for the app.
All classes can also be viewed by clicking on the \textit{Toggle Class Listing} menu. A sneak-peek of each class can be
viewed by simply clicking on any class item.

\begin{tip}{Notice}
    Due to various limitations, it is not possible to scan all the components of an APK file. This is especially true if
    an APK is highly obfuscated. The scanner also does not check strings (or website signatures).
\end{tip}

The second item lists the number of trackers along with their names. Clicking on the item displays a dialog containing
the name of trackers, matched signatures, and the number of classes against each signature. Some tracker names may have
$^2$ prefix which indicates that the trackers are in the \href{https://etip.exodus-privacy.eu.org}{ETIP} stand-by list
i.e.\ whether they are actual trackers is still being investigated.

The third item lists the number of libraries along with their names. The information are mostly taken from
\href{https://gitlab.com/IzzyOnDroid/repo}{IzzyOnDroid repo}.

\seealsoinline{\hyperref[subsec:tracker-classes-versus-tracker-components]{FAQ: Tracker classes vs tracker components}}</string>
    <string name="pages_scannerpage-missing-signatures">At the bottom of the page, there is a special item denoting the number of missing signatures (i.e.\ missing classes).
The missing signatures are the ones that AM has failed to match against any known libraries. The number itself has no
particular meaning as many libraries contain hundreds of classes, but clicking on the item will bring up a dialog
containing the signatures which is helpful in inspecting the missing signatures. \textbf{This feature is only intended
for people who know what a missing signature is and what to do with it, average users should just ignore it.}</string>
    <string name="pages_interceptorpage-section==title">Interceptor Page</string>
    <string name="pages_interceptorpage-intent-filters==title">Intent Filters</string>
    <string name="pages_interceptorpage-action==title">Action</string>
    <string name="pages_interceptorpage-data==title">Data</string>
    <string name="pages_interceptorpage-mime-type==title">MIME Type</string>
    <string name="pages_interceptorpage-categories==title">Categories</string>
    <string name="pages_interceptorpage-flags==title">Flags</string>
    <string name="pages_interceptorpage-extras==title">Extras</string>
    <string name="pages_interceptorpage-uri==title">URI</string>
    <string name="pages_interceptorpage-matching-activities==title">Matching Activities</string>
    <string name="pages_interceptorpage-reset-to-default==title">Reset to Default</string>
    <string name="pages_interceptorpage-send-edited-intent==title">Send Edited Intent</string>
    <string name="pages_interceptorpage-section">Interceptor can be used to intercept communication between apps using \texttt{Intent}. It works as a man-in-the-middle
between the source and the destination apps. It offers a feature-complete user interface for editing \texttt{Intent}s.

\begin{tip}{Info}
    Development of interceptor is still in progress. It can only intercept activities for now.
\end{tip}

\begin{warning}{Warning}
    Interceptor only works for \textit{implicit} intents where the \hyperref[subsec:faq:what-are-app-components]{app
    component} isn\'t specified.
\end{warning}

\begin{amseealso}
    \item \href{https://developer.android.com/guide/components/intents-common}{Common Intents}
    \item \href{https://developer.android.com/guide/components/intents-filters}{Intents and Intent Filters}
\end{amseealso}</string>
    <string name="pages_interceptorpage-intent-filters">Intent filters are used by the apps to specify which tasks they are able to perform or which tasks they are going to
perform using other apps. For example, when you\'re opening a PDF file using a file manager, the file manager will try
to find which apps to open the PDF with. To find the right applications, the file manager will create an Intent with
filters such as MIME type and ask the system to retrieve the matched applications that is able to open this filter.
The system will search through the Manifest of the installed applications to match the filter and list the app
components that are able to open this filter (in our case the PDF). At this, either the file manager will open the
desired app component itself or use a system provided option to open it. If multiple app components are able to open it
and no default is set, you may get a prompt where you have to choose the right app component.</string>
    <string name="pages_interceptorpage-action">Action specifies the generic action to perform such as \texttt{android.intent.action.VIEW}. Applications often declare
the relevant actions in the Manifest file to catch the desired Intents. The action is particularly useful for broadcast
Intent where it plays a vital rule. In other cases, it works as an initial way to filter out relevant app components.
Generic actions such as \texttt{android.intent.action.VIEW} and \texttt{android.intent.action.SEND} are widely used by
apps. So, setting this alone may match many app components.</string>
    <string name="pages_interceptorpage-data">Data is originally known as URI (Uniform Resource Identifier) defined in
\href{http://www.faqs.org/rfcs/rfc2396.html}{RFC 2396}. It can be web links, file location, or a special feature called
\textit{content}. Contents are an Android feature managed by the \hyperref[appdetails:providers]{content providers}.
Data are often associated with a \hyperref[subsubsec:mime-type]{MIME type}.

Examples:</string>
    <string name="pages_interceptorpage-mime-type">MIME type of the \hyperref[subsubsec:data]{data}. For example, if the data field is set to
\texttt{file:///sdcard/AppManager.apk}, the associated MIME type can be \texttt{application/vnd.android.package-archive}.</string>
    <string name="pages_interceptorpage-categories">This is similar to \hyperref[subsubsec:action]{action} in the sense that it is also used by the system to filter app
components. This has no further benefits. Unlike \textit{action}, there can be more than one category. Clicking on the
\textit{plus} button next to the title allows adding more categories.</string>
    <string name="pages_interceptorpage-flags">Flags are useful in determining how system should behave during the launch or after the launch of an activity. An
average user should avoid this as it requires some technical background. The \textit{plus} button next to the title can
be used to add one or more flags.</string>
    <string name="pages_interceptorpage-extras">Extras are the key-value pairs used for supplying additional information to the destination component. You can add
extras using the \textit{plus} button next to the title.</string>
    <string name="pages_interceptorpage-uri">Represents the entire Intent as a URI (e.g. \texttt{intent://\dots}). Some data cannot be converted to string, and as a
result, they might not appear here.</string>
    <string name="pages_interceptorpage-matching-activities">List all the activity components that matches the Intent. This is internally determined by the system (rather than AM).
The launch button next to each component can be used to launch them directly from AM\\@.</string>
    <string name="pages_interceptorpage-reset-to-default">Reset the Intent to its initial state. This may not always work as expected.</string>
    <string name="pages_interceptorpage-send-edited-intent">Resend the edited Intent to the destination app. This may open a list of apps where you have to select the desired app.
The result received from the target app will be sent to the source app. As a result the source app will not know if
there was a man-in-the-middle.</string>
    <string name="guide_aot-section==title">ADB over TCP</string>
    <string name="guide_aot-enabledevoptions==title">Enable developer options</string>
    <string name="guide_aot-locationdevoptions==title">Location of developer options</string>
    <string name="guide_aot-howenabledevoptions==title">How to enable developer options</string>
    <string name="guide_aot-enableusbdbg==title">Enable USB debugging</string>
    <string name="guide_aot-miuiusbdbg==title">Xiaomi (MIUI)</string>
    <string name="guide_aot-emuiusbbdbg==title">Huawei (EMUI)</string>
    <string name="guide_aot-lgusbdbg==title">LG</string>
    <string name="guide_aot-troubleshootingusbdbg==title">Troubleshooting</string>
    <string name="guide_aot-setupadbonpc==title">Setup ADB on PC or Mac</string>
    <string name="guide_aot-setupadbwin==title">Windows</string>
    <string name="guide_aot-setupadbmac==title">macOS</string>
    <string name="guide_aot-setupadblnx==title">Linux</string>
    <string name="guide_aot-configureaot==title">Configure ADB over TCP</string>
    <string name="guide_aot-aotlineage==title">Lineage OS</string>
    <string name="guide_aot-enableaotviapc==title">Enable ADB over TCP via PC or Mac</string>
    <string name="guide_aot-adbmodeam==title">Enable ADB mode on App Manager</string>
    <string name="guide_aot-references==title">References</string>
    <string name="guide_aot-section">Many root-only features can still be used by enabling ADB over TCP. To do that, a PC or Mac is required with Android
platform-tools installed, and an Android phone with developer options \&amp; USB debugging enabled.

\begin{tip}{Root users}
    If superuser permission has been granted to App Manager, it can already execute privileged code without any problem.
    \textbf{Therefore, root users don\'t need to enable ADB over TCP.} If you still want to use ADB over TCP, you must
    revoke superuser permission for App Manager and restart your device. You may see \textit{working on ADB mode}
    message without restarting but this isn\'t entirely true. The server (used as an interface between system and App
    Manager) is still running in root mode. This is a known issue and will be fixed in a future version of App Manager.
\end{tip}

\seealsoinline{\hyperref[sec:faq:adb-over-tcp]{FAQ: ADB over TCP}}</string>
    <string name="guide_aot-locationdevoptions">\textbf{Developer options} is located in Android \textbf{Settings}, either directly near the bottom of the page (in most
ROMs) or under some other settings such as \textbf{System} (Lineage OS, Asus Zenfone 8.0+), \textbf{System} &gt;
\textbf{Advanced} (Google Pixel), \textbf{Additional Settings} (Xiaomi MIUI, Oppo ColorOS), \textbf{More Settings} (Vivo
FuntouchOS), \textbf{More} (ZTE Nubia). Unlike other options, it is not visible until explicitly enabled by the user. If
developer options is enabled, you can use the search box in Android \textbf{Settings} to locate it as well.</string>
    <string name="guide_aot-howenabledevoptions">This option is available within Android \textbf{Settings} as well but like the location of the developer options, it
also differs from device to device. But in general, you have to find \textbf{Build number} (or \textbf{MIUI version} for
MIUI ROMs and \textbf{Software version} for Vivo FuntouchOS, \textbf{Version} for Oppo ColorOS) and tap it at least 7
(seven) times until you finally get a message saying \textit{You are now a developer} (you may be prompted to insert
pin/password/pattern or solve captchas at this point). In most devices, it is located at the bottom of the settings
page, inside \textbf{About Phone}. But the best way to find it is to use the search box.</string>
    <string name="guide_aot-enableusbdbg">After \hyperref[subsubsec:location-of-developer-options]{locating the developer options}, enable \textbf{Developer
option} (if not already). After that, scroll down a bit until you will find the option \textbf{USB debugging}. Use the
toggle button on the right hand side to enable it. At this point, you may get an alert prompt where you may have to
click \textit{OK} to actually enable it. You may also have to enable some other options depending on device vendor and
ROM. Here are some examples:</string>
    <string name="guide_aot-miuiusbdbg">Enable \textbf{USB debugging (security settings)} as well.</string>
    <string name="guide_aot-emuiusbbdbg">Enable \textbf{Allow ADB debugging in charge only mode} as well. When connecting to your PC or Mac, you may get a prompt
saying \textbf{Allow access to device data\?} in which case click \textbf{YES, ALLOW ACCESS}.

\begin{tip}{Notice}
    Often the \textbf{USB debugging} mode could be disabled automatically by the system. If that\'s the case, repeat the
    above procedure.
\end{tip}</string>
    <string name="guide_aot-lgusbdbg">Make sure you have \textbf{USB tethering} enabled.</string>
    <string name="guide_aot-troubleshootingusbdbg">In case \textbf{USB Debugging} is greyed out, you can do the following:
\begin{enumerate}
    \item Make sure you enabled USB debugging before connecting your phone to the PC or Mac via USB cable
    \item Enable USB tethering after connecting to PC or Mac via USB cable
    \item (For Samsung) If your device is running KNOX, you may have to follow some additional steps. See official
    documentations or consult support for further assistant
\end{enumerate}</string>
    <string name="guide_aot-setupadbonpc">In order to enable ADB over TCP, you have to set up ADB in your PC or Mac. \textbf{\textit{Lineage OS users can skip to
ยง\cref{subsubsec:lineage-os}.}}</string>
    <string name="guide_aot-setupadbwin">\begin{enumerate}
    \item Download the latest version of
    \href{https://dl.google.com/android/repository/platform-tools-latest-windows.zip}{Android SDK Platform-Tools} for
    Windows
    \item Extract the contents of the zip file into any directory (such as \texttt{C:\textbackslash{adb}}) and navigate
    to that directory using \textit{Explorer}
    \item Open \textbf{Command Prompt} or \textbf{PowerShell} from this directory. You can do it manually from the start
    menu or by holding \texttt{Shift} and Right clicking within the directory in \textit{File Explorer} and then
    clicking either on \textit{Open command window here} or on \textit{Open PowerShell window here} (depending on
    what you have installed). You can now access ADB by typing \texttt{adb} (Command Prompt) or \texttt{./adb}
    (PowerShell). Do not close this window yet
\end{enumerate}</string>
    <string name="guide_aot-setupadbmac">\begin{enumerate}
    \item Download the latest version of
    \href{https://dl.google.com/android/repository/platform-tools-latest-darwin.zip}{Android SDK Platform-Tools} for
    macOS
    \item Extract the contents of the zip file into a directory by clicking on it. After that, navigate to that
    directory using \textit{Finder} and locate \texttt{adb}
    \item Open \textbf{Terminal} using \textit{Launchpad} or \textit{Spotlight} and drag-and-drop \texttt{adb} from the
    \textit{Finder} window into the \textit{Terminal} window. Do not close the \textit{Terminal} window yet
\end{enumerate}

\begin{tip}{Tip}
    If you are not afraid to use command line, here\'s a one liner:
    \begin{minted}[frame=lines]{bash}
cd ~/Downloads &amp;&amp; curl -o platform-tools.zip -L \
https://dl.google.com/android/repository/platform-tools-latest-darwin.zip &amp;&amp; \
unzip platform-tools.zip &amp;&amp; rm platform-tools.zip &amp;&amp; cd platform-tools
    \end{minted}
    After that, you can simply type \texttt{./adb} in the in same \textit{Terminal} window to access ADB\\@.
\end{tip}</string>
    <string name="guide_aot-setupadblnx">\begin{enumerate}
    \item Open your favourite terminal emulator. In most GUI-distros, you can open it by holding \texttt{Control},
    \texttt{Alter} and \texttt{T} at the same time
    \item Run the following command:
    \begin{minted}[frame=lines,autogobble]{bash}
cd ~/Downloads &amp;&amp; curl -o platform-tools.zip -L \
https://dl.google.com/android/repository/platform-tools-latest-linux.zip &amp;&amp; \
unzip platform-tools.zip &amp;&amp; rm platform-tools.zip &amp;&amp; cd platform-tools
    \end{minted}
    \item If it is successful, you can simply type \texttt{./adb} in the in \textit{same} terminal emulator window or
    type \texttt{\textasciitilde/Downloads/platform-tools/adb} in any terminal emulator to access ADB\\@.
\end{enumerate}</string>
    <string name="guide_aot-aotlineage">Lineage OS (or its derivatives) users can directly enable ADB over TCP using the developer options. To enable that,
go to the \textbf{Developer options}, scroll down until you find \textbf{ADB over Network}. Now, use the toggle button
on the right-hand side to enable it and skip to ยง\cref{subsubsec:adb-mode-on-app-manager}.</string>
    <string name="guide_aot-enableaotviapc">For other ROMs, you can do this using the command prompt/PowerShell/terminal emulator that you\'ve opened in the step 3
of the previous section. In this section, I will use \texttt{adb} to denote \texttt{./adb}, \texttt{adb} or any other
command that you needed to use based on your platform and software in the previous section.
\begin{enumerate}
    \item Connect your device to your PC or Mac using a USB cable. For some devices, it is necessary to turn on
    \textit{File transfer mode (MTP)} as well
    \item To confirm that everything is working as expected, type \texttt{adb devices} in your terminal. If your device
    is connected successfully, you will see something like this:
    \begin{Verbatim}
List of devices attached
xxxxxxxx  device
    \end{Verbatim}
    \begin{tip}{Notice}
        In some Android phones, an alert prompt will be appeared with a message \textbf{Allow USB Debugging}
        in which case, check \textit{Always allow from this computer} and click \textbf{Allow}.
    \end{tip}
    \item Finally, run the following command to enable ADB over TCP:
    \begin{minted}[frame=lines,autogobble]{bash}
adb tcpip 5555
    \end{minted}
\end{enumerate}

\begin{danger}{Danger}
    You cannot disable developer options or USB debugging after enabling ADB over TCP\\@.
\end{danger}</string>
    <string name="guide_aot-adbmodeam">After enabling ADB over TCP (in the previous subsections), open App Manager (AM). You should see \textbf{working on ADB
mode} toast message at the bottom. If not, remove AM from the recents and open AM again from the launcher.

\begin{tip}{Notice}
    In some Android phones, the USB cable is needed to be disconnected from the PC in order for it to work.
\end{tip}

\begin{warning}{Warning}
    ADB over TCP will be disabled after a restart. In that case, you have to follow
    ยง\cref{subsubsec:enable-adb-over-tcp-via-pc-or-mac} again.
\end{warning}</string>
    <string name="guide_aot-references">\begin{enumerate}
    \item \href{https://www.xda-developers.com/install-adb-windows-macos-linux}{How to Install ADB on Windows, macOS, and Linux}
    \item \href{https://developer.android.com/studio/command-line/adb}{Android Debug Bridge (adb)}
    \item \href{https:/</string>
    <string name="guide_backuprestore-section==title">Back up/Restore</string>
    <string name="guide_backuprestore-location==title">Location</string>
    <string name="guide_backuprestore-options==title">Backup Options</string>
    <string name="guide_backuprestore-backup==title">Backup</string>
    <string name="guide_backuprestore-restore==title">Restore</string>
    <string name="guide_backuprestore-delete==title">Delete Backup</string>
    <string name="guide_backuprestore-section">App Manager has a modern, advanced and easy-to-use backup/restore system implemented from the scratch.
This is probably the only app that has the ability to restore not only the app or its data but also permissions and
rules that you\'ve configured within App Manager.
You can also choose to back up an app multiple times (with custom names) or for all users.

\begin{amseealso}
    \item \hyperref[subsec:1-click-back-up]{1-Click Ops: Back up}
    \item \hyperref[subsec:1-click-restore]{1-Click Ops: Restore}
\end{amseealso}</string>
    <string name="guide_backuprestore-location">Back up/restore is a part of \hyperref[subsec:batch-operations]{batch operations}.
It is also located inside the \hyperref[subsubsec:app-info-options-menu]{options menu} in the
\hyperref[subsec:app-info-tab]{App Info tab}.
Clicking on \textbf{Backup/Restore} opens the \textbf{Backup Options}.
Backups are located at \texttt{/storage/emulated/0/AppManager} by default.
You can configure custom backup location in the \hyperref[subsubsec:backup-volume]{settings page} in which case the backups
will be located at the \texttt{AppManager} folder in the selected volume.

\begin{tip}{Note}
    If one or more selected apps do not have any backup, the \textbf{Restore} and \textbf{Delete Backup} options will
    not be displayed.
\end{tip}</string>
    <string name="guide_backuprestore-options">Backup options (internally known as backup flags) let you customise the backups on the fly.
However, the customisations will not be remembered for the future backups.
If you want to customise this dialog, use \hyperref[subsubsec:settings-backup-options]{Backup Options} in the \hyperref[sec:settings-page]{Settings page}.

A complete description of the backup options is given below:
\begin{itemize}
    \item \textbf{APK files.} Whether to back up the APK files.
    This includes the \textit{base APK} file along with the \texttt{split APK} files if they exist.

    \item \textbf{Internal data.} Whether to back up the internal data directories.
    These directories are located at \texttt{/data/user/&lt;user\_id&gt;} and (for Android N or later) \texttt{/data/user\_de/&lt;user\_id&gt;}.

    \item \textbf{External data.} Whether to back up data directories located in the internal memory as well as SD Card (if exists).
    External data directories often contain non-essential app data or media files (instead of using the dedicated media folder) and may increase the backup size.
    However, it might be essential for some apps.
    Although it isn\'t checked by default (as it might dramatically increase the size of the backups), you may have to check it in order to ensure a smooth restore of your backups.
    \begin{warning}{Caution}
        Internal data folders should always be backed up if you are going to back up the external data folders.
        However, it could be useful to back up only the external folders if the app in question downloads a lot of assets from the Internet.
    \end{warning}

    \item \textbf{OBB and media.} Whether to back up or restore the OBB and the media directories located in the
    external storage or the SD Card.
    This is useful for games and the graphical software which actually use these folders.

    \item \textbf{Cache.} Android apps have multiple cache directories located at every data directories (both internal and external).
    There are two types of cache: \textbf{cache} and \textbf{code cache}.
    Enabling this option excludes both cache directories from all the data directories.
    It is generally advised to exclude cache directories since most apps do not clear the cache regularly (for some
    reason, the only way an app can clear its cache is by deleting the entire cache directory) and usually handled by the OS itself.
    Apps such as Telegram may use a very large cache (depending on the storage space) which may dramatically increase the backup size.
    When it is disabled, AM also ignores the \textbf{no\_backup} directories.

    \item \textbf{Extras.} Backup/restore app permissions, net policy, battery optimization, SSAID, etc., enabled by default.
    Note that, blocking rules are applied \textit{after} applying the extras.
    So, if an item is present in both places, it will be overwritten (i.e., the one from the blocking rules will be used).

    \item \textbf{Rules.} This option lets you back up blocking rules configured within App Manager.
    This might come in handy if you have customised permissions or block some components using App Manager as they will
    also be backed up or restored when you enable this option.

    \item \textbf{Backup Multiple.} Whether this is a multiple backup.
    By default, backups are saved using their user ID\\@.
    Enabling this option allows you to create additional backups.
    These backups use the current date-time as the default backup name, but you can also specify custom backup name
    using the input field displayed when you click on the \textbf{Backup} button.

    \item \textbf{Custom users.} Backup or restore for the selected users instead of only the current user.
    This option is only displayed if the system has more than one user.

    \item \textbf{Skip signature checks.} When taking a backup, checksum of every file (as well as the signing
    certificate(s) of the base APK file) is generated and stored in the \texttt{checksums.txt} file.
    When you restore the backup, the checksums are generated again and are matched with the checksums stored in the said file.
    Enabling this option will disable the signature checks.
    This option is applied only when you restore a backup.
    During backup, the checksums are generated regardless of this option.
    \begin{warning}{Caution}
        You should always disable this option to ensure that your backups are not modified by any third-party applications.
        However, this would only work if you enabled encryption.
    \end{warning}
\end{itemize}

\seealsoinline{\hyperref[subsubsec:settings-encryption]{Settings: Encryption}}</string>
    <string name="guide_backuprestore-backup">Backup respects all the backup options except \textbf{Skip signature checks}.
If base backups (i.e., backups that don\'t have the \textbf{Backup Multiple} option) already exist, you will get a warning as the backups will be overwritten.
If \textbf{Backup Multiple} is set, you have an option to input the backup name, or you can leave it blank to use the current date-time.</string>
    <string name="guide_backuprestore-restore">Restore respects all the backup options and will fail if \textbf{APK files} option is set, but the backup doesn\'t
contain such backups or in other cases, if the app isn\'t installed.
When restoring backups for multiple packages, you can only restore the base backups (see \hyperref[subsec:backup-restore-backup]{backup} section for an explanation).
However, when restoring backups for a single package, you have the option to select which backup to restore.
If \textbf{All users} option is set, AM will restore the selected backup for all users in the latter case but in the former case, it will restore base backups for the respective users.

\begin{tip}{Notice}
    Apps that use storage access framework (SAF), SSAID or Android KeyStore works properly only after an immediate restart.
\end{tip}</string>
    <string name="guide_backuprestore-delete">Delete backup only respects \textbf{All users} option and when it is selected, only the base backups for all users will be deleted with a prompt.
When deleting backups for a single package, another dialog will be displayed where you can select the backups to delete.</string>
    <string name="guide_netpolicy-section==title">Net Policy</string>
    <string name="guide_netpolicy-section">Short for \textbf{Network policy} or network policies.
It is usually located in the Android settings under \textbf{Mobile data \&amp; Wifi} section in the app info page of an app.
Not all policies are guaranteed to be included in this page (e.g.\ Samsung), and not all settings are well-understood due to lack of documentation.
App Manager can display all the net policies declared in the \href{https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/net/NetworkPolicyManager.java}{NetworkPolicyManager}.
Policies unknown to App Manager will have a \textit{Unknown} prefix along with the policy constant name and number in the hexadecimal format.
Unknown policies should be reported to App Manager for inclusion.

Net policy allows a user to configure certain networking behaviour of an app without modifying the ip tables directly and/or running a firewall app.
However, the features it offers largely depend on Android version and ROM. A list of known net policies are listed below:

\begin{enumerate}
    \item \textbf{None} or \textbf{\texttt{POLICY\_NONE}}: (AOSP) No specific network policy is set.
    System can still assign rules depending on the nature of the app.

    \item \textbf{Reject background data} or \textbf{\texttt{POLICY\_REJECT\_METERED\_BACKGROUND}}: (AOSP) Reject network usage on metered networks when the application is in background.

    \item \textbf{Allow background data when Data Saver is on} or \textbf{\texttt{POLICY\_ALLOW\_METERED\_BACKGROUND}}: (AOSP) Allow metered network use in the background even when data saving mode is enabled.

    \item \textbf{Reject cellular data} or \textbf{\texttt{POLICY\_REJECT\_CELLULAR}} (Android 11+) or \textbf{\texttt{POLICY\_REJECT\_ON\_DATA}} (up to Android 10): (Lineage OS) Reject mobile/cellular data.
    Signals network unavailable to the configured app as if the mobile data is inactive.

    \item \textbf{Reject VPN data} or \textbf{\texttt{POLICY\_REJECT\_VPN}} (Android 11+) or \textbf{\texttt{POLICY\_REJECT\_ON\_VPN}} (up to Android 10): (Lineage OS) Reject VPN data.
    Signals network unavailable to the configured app as if the VPN is inactive.

    \item \textbf{Reject Wi-Fi data} or \textbf{\texttt{POLICY\_REJECT\_WIFI}} (Android 11+) or \textbf{\texttt{POLICY\_REJECT\_ON\_WLAN}} (up to Android 10): (Lineage OS) Reject Wi-Fi data.
    Signals network unavailable to the configured app as if the device is not connected to a Wi-Fi network.

    \item \textbf{Disable network access} or \textbf{\texttt{POLICY\_REJECT\_ALL}} (Android 11+) or \textbf{\texttt{POLICY\_NETWORK\_ISOLATED}} (up to Android 10): (Lineage OS) Reject network access in all circumstances.
    This is not the same as enforcing the other three policies above, and is the recommended policy for dodgy apps.
    If this policy is enforced, there is no need to enforce the other policies.

    \item \textbf{\texttt{POLICY\_ALLOW\_METERED\_IN\_ROAMING}}: (Samsung) Possibly allow metered network use during roaming.
    Exact meaning is currently unknown.

    \item \textbf{\texttt{POLICY\_ALLOW\_WHITELIST\_IN\_ROAMING}}: (Samsung) Possibly allow network use during roaming.
    Exact meaning is currently unknown.
\end{enumerate}

\begin{tip}{Note}
    Corresponding Lineage OS patches are as follows:
    \begin{enumerate}
        \item \href{https://github.com/LineageOS/android\_frameworks\_base/commit/a04932bafbbf7d99efd18276152cc2c9c9b2073e}{fw/b: Squash of app fw restriction commits}
        \item \href{https://github.com/LineageOS/android\_frameworks\_base/commit/02c8c82854348f52afe2199f310f44b5f578b5b8}{fw/b: Add support for per app network isolation}
    \end{enumerate}
\end{tip}</string>
    <string name="faq_appcomponents-section==title">App Components</string>
    <string name="faq_appcomponents-whatareappcomponents==title">What are the app components\?</string>
    <string name="faq_appcomponents-limitations==title">How are the tracker or other components blocked in AM\? What are its limitations\?</string>
    <string name="faq_appcomponents-detectbyrelatedapps==title">Why are the components blocked by AM not detected by other related apps\?</string>
    <string name="faq_appcomponents-othertoolsretainedinam==title">Does app components blocked by other tools retained in AM\?</string>
    <string name="faq_appcomponents-alsoblockedbyothertools==title">What happened to the components blocked by AM which are also blocked by other tools\?</string>
    <string name="faq_appcomponents-whatiscomponentblocking==title">What is instant component blocking\?</string>
    <string name="faq_appcomponents-trackerclassesversustrackercomponents==title">Tracker classes versus tracker components</string>
    <string name="faq_appcomponents-howtounblock==title">How to unblock the tracker components blocked using 1-Click Ops or Batch Ops\?</string>
    <string name="faq_appcomponents-whatareappcomponents">Activities, services, broadcast receivers (also known as receivers) and content providers (also known as providers) are
jointly called app components. More technically, they all inherit the
\href{https://developer.android.com/reference/android/content/pm/ComponentInfo}{ComponentInfo} class.</string>
    <string name="faq_appcomponents-limitations">AM blocks application components (or tracker components) using a method called
\href{https://carteryagemann.com/pages/android-intent-firewall.html}{Intent Firewall (IFW)}, it is very superior to
other methods such as \textit{pm} (PackageManager), \href{https://github.com/RikkaApps/Shizuku}{Shizuku} or any other
method that uses the package manager to enable or disable the components. If a component is disabled by the latter
methods, the app itself can detect that the component is being blocked and can re-enable it as it has full access to its
own components. (Many deceptive apps actually exploit this in order to keep the tracker components unblocked.) On the
other hand, IFW is a true firewall and the app cannot detect if the blocking is present. It also cannot re-enable it by
any means. AM uses the term \textit{block} rather than \textit{disable} for this reason.

Even IFW has some limitations which are primarily applicable for the system apps:
\begin{itemize}
    \item The app in question is whitelisted by the system i.e.\ the system cannot function properly without these apps
    and may cause random crashes. These apps include but not limited to Android System, System UI, Phone Services. They
    will run even if you disable them or block their components via IFW\\@.

    \item Another system app or system process is calling a specific component of the app in question via interprocess
    communication (IPC). In this case, the component will be activated regardless of its presence in the IFW rules or
    even if the entire app is disabled. If you have such system apps, the only way to prevent them from running is to
    get rid of them.
\end{itemize}</string>
    <string name="faq_appcomponents-detectbyrelatedapps">It is because of the blocking method I\'m using. This method is called
\href{https://carteryagemann.com/pages/android-intent-firewall.html}{Intent Firewall (IFW)} and is compatible with
\href{https://github.com/tuyafeng/Watt}{Watt} and \href{https://github.com/lihenggui/blocker}{Blocker}.
\href{https://www.myandroidtools.com}{MyAndroidTool (MAT)} supports IFW, but it uses a different format. Therefore,
Watt can detect blocked components by default but Blocker can only detect them if you enable IFW in its settings page.
MAT cannot detect AM\'s blocking rules since the format is different. AM cannot detect MAT\'s rules if IFW is enabled in
MAT. In that case, you can still import them from the \hyperref[sec:settings-page]{settings page}. MAT has an export
option, but it\'s not supported due to its non-free nature.</string>
    <string name="faq_appcomponents-othertoolsretainedinam">\textbf{No.} But components blocked by the Android System or any other tools are displayed in the
\hyperref[sec:app-details-page]{App Details page} (within the component tabs). In v2.5.12 and onwards, you can import
these rules in \hyperref[par:import-existing-rules]{Settings}. But since there is no way to distinguish between
components blocked by third-party apps and components blocked by the System, you should be very careful when choosing
app.</string>
    <string name="faq_appcomponents-alsoblockedbyothertools">AM blocks the components again using
\href{https://carteryagemann.com/pages/android-intent-firewall.html}{Intent Firewall (IFW)}. They are not unblocked (if
blocked using \textit{pm} or \href{https://github.com/RikkaApps/Shizuku}{Shizuku} method) and blocked again. But if you
unblock a component in the \hyperref[sec:app-details-page]{App Details page}, it will be reverted back to default state
โ- blocked or unblocked as described in the corresponding app manifest โ- using both IFW and \textit{pm} method.
However, components blocked by \href{https://www.myandroidtools.com}{MyAndroidTools (MAT)} with IFW method will not be
unblocked by AM. To solve this issue, you can first import the corresponding configuration to AM in
\hyperref[par:import-existing-rules]{Settings} in which case MAT\'s configurations will be removed. But this option is
only available from v2.5.12.</string>
    <string name="faq_appcomponents-whatiscomponentblocking">When you block a component in the \hyperref[sec:app-details-page]{App Details page}, the blocking is not applied by
default. It is only applied when you apply blocking using the \textit{Apply rules} option in the top-right menu. If you
enable \hyperref[subsubsec:instant-component-blocking]{instant component blocking}, blocking will be applied as soon as you block a component. If you choose to
block tracker components, however, blocking is applied automatically regardless of this setting. You can also remove
blocking for an app by simply clicking on \textit{Remove rules} in the same menu in the \textbf{App Details page}. Since
the default behaviour gives you more control over apps, it is better to keep \textit{instant component blocking} option
disabled.</string>
    <string name="faq_appcomponents-trackerclassesversustrackercomponents">All app components are classes but not all classes are components. In fact, only a few of the classes are components.
That being said, \hyperref[sec:scanner-page]{scanner page} displays a list of trackers along with the number of classes,
not just the components. In all other pages, trackers and tracker components are used synonymously to denote tracker
components, i.e.\ blocking tracker means blocking tracker components, not tracker classes.

\begin{tip}{Info}
    Tracker classes cannot be blocked. They can only be removed by editing the app itself.
\end{tip}</string>
    <string name="faq_appcomponents-howtounblock">Some apps may misbehave due to their dependency to tracker components blocked by AM. From v2.5.12, there is an option
to unblock tracker components in the \hyperref[sec:1-click-ops-page]{1-Click Ops page}. However, in previous versions,
there is no such options. To unblock these tracker components, first go to the \hyperref[sec:app-details-page]{App
Details page} of the misbehaving app. Then, switching to the \textit{Activities} tab, click on the \textit{Remove rules}
options in the top-right menu. All the blocking rules related to the components of the app will be removed immediately.
Alternatively, if you have found the component that is causing the issue, you can unblock the component by clicking on
the \textit{unblock} button next to the component name. If you have enabled
\hyperref[subsubsec:instant-component-blocking]{instant component blocking} in Settings, disable it first as
\textit{Remove rules} option will not be visible when it is enabled.

If you have \textbf{Google Play Services} (\texttt{com.google.android.gms}) installed, unblocking the following
\hyperref[subsubsec:details:servcies]{services} may fix certain crashes:
\begin{enumerate}
    \item Ad Request Broker Service \small{\texttt{.ads.AdRequestBrokerService}}
    \item Cache Broker Service \small{\texttt{.ads.cache.CacheBrokerService}}
    \item Gservices Value Broker Service \small{\texttt{.ads.GservicesValueBrokerService}}
    \item Advertising Id Notification Service \small{\texttt{.ads.identifier.service.AdvertisingIdNotificationService}}
    \item Advertising Id Service \small{\texttt{.ads.identifier.service.AdvertisingIdService}}
\end{enumerate}</string>
    <string name="faq_aot-section==title">ADB over TCP</string>
    <string name="faq_aot-restart==title">Do I have to enable ADB over TCP everytime I restart\?</string>
    <string name="faq_aot-usbdebugging==title">Cannot enable USB debugging. What to do\?</string>
    <string name="faq_aot-blocktracker==title">Can I block tracker or any other application components using ADB over TCP\?</string>
    <string name="faq_aot-featureadb==title">Which features can be used in ADB mode\?</string>
    <string name="faq_aot-restart">Unfortunately, yes. However, as of v2.5.13, you don\'t need to keep AoT enabled all the time as it now uses a
server-client mechanism to interact with the system, but you do have to keep the \textbf{Developer options} as well as
\textbf{USB debugging} enabled. To do that, enable \hyperref[sec:adb-over-tcp]{ADB over TCP} and open App Manager. You
should see \textit{working on ADB mode} toast message in the bottom. If you see it, you can safely stop the server. For
Lineage OS or its derivative OS, you can toggle AoT without any PC or Mac by simply toggling the \textbf{ADB over
network} option located just below the \textbf{USB debugging}, but the server can\'t be stopped for the latter case.</string>
    <string name="faq_aot-usbdebugging">See ยง\cref{subsec:enable-usb-debugging} in Chapter \cref{ch:guides}.</string>
    <string name="faq_aot-blocktracker">Sadly, no. ADB has limited \href{https://github.com/aosp-mirror/platform_frameworks_base/blob/master/packages/Shell/AndroidManifest.xml}{permissions}
and controlling application components is not one of them.</string>
    <string name="faq_aot-featureadb">Most of the features supported by ADB mode are enabled by default once ADB support is detected by AM. These include
disable, force-stop, clear data, grant/revoke app ops and permissions. You can also install applications without any
prompt and view \hyperref[subsubsec:main:running-apps]{running apps/processes}.</string>
    <string name="faq_misc-section==title">Miscellanea</string>
    <string name="faq_appcomponents-idontuserootadb==title">I don\'t use root/ADB. Am I completely safe from any harms\?</string>
    <string name="faq_appcomponents-internet==title">Why does AM have the INTERNET permission when it doesn\'t connect to the Internet\?</string>
    <string name="faq_appcomponents-howtrackerupdate==title">How are the trackers and libraries are updated\?</string>
    <string name="faq_appcomponents-shizuku==title">Any plans for Shizuku\?</string>
    <string name="faq_appcomponents-bloatware==title">What are bloatware and how to remove them\?</string>
    <string name="faq_appcomponents-idontuserootadb">Yes. AM cannot modify any system settings without root or ADB over TCP\\@.</string>
    <string name="faq_appcomponents-internet">AM uses the INTERNET permission for the following reasons:
\begin{enumerate}
    \item \textbf{To provide ADB over TCP support for the non-root users.} ADB over TCP is a custom network protocol
    that usually runs on port \texttt{5555}. Therefore, to connect to this port via localhost, AM needs this permission.
    \item \textbf{To execute privileged code both on root and ADB mode.} AM, being a user app, cannot execute privileged
    code nor can it access any hidden APIs. Consequently, AM runs a server in the privileged environment using
    \texttt{app\_process} at port \texttt{60001} and on the user side, AM connects to this server and execute privileged
    code remotely from the app. Now, there are alternative ways to communicate with a remote service. Currently, they
    are under consideration.
\end{enumerate}</string>
    <string name="faq_appcomponents-howtrackerupdate">Trackers and libraries are updated manually before making a new release.</string>
    <string name="faq_appcomponents-shizuku">App Manager\'s use of hidden API and privileged code execution is now much more complex and cannot be integrated with
other third party apps such as \href{https://shizuku.rikka.app}{Shizuku}. Here are some reasons for not considering
Shizuku (which now has Apache 2.0 license) for App Manager:
\begin{enumerate}
    \item Shizuku was initially non-free which led me to use a similar approach for App Manager to support both root
    and ADB
    \item App Manager already supports both ADB and root which in some cases is more capable than Shizuku
    \item Relying on a third-party app for the major functionalities is not a good design choice
    \item Integration of Shizuku will increase the complexity of App Manager.
\end{enumerate}</string>
    <string name="appendices_specifications-chapter==title">Specifications</string>
    <string name="appendices_specifications-rules-specification==title">Rules Specification</string>
    <string name="appendices_specifications-background==title">Background</string>
    <string name="appendices_specifications-rulesfileformat==title">Rules File Format</string>
    <string name="appendices_specifications-internal==title">Internal</string>
    <string name="appendices_specifications-external==title">External</string>
    <string name="appendices_specifications-background">AM currently supports blocking activities, broadcast receivers, content providers, services, app ops and permissions,
and in future I may add more blocking options. In order to add more portability, it is necessary to import/export all
these data.

Maintaining a database should be the best choice when it comes to storing data. For now, several \texttt{tsv} files
with each file having the name of the package and a \texttt{.tsv} extension. The file/database will be queried/processed
by the \texttt{RulesStorageManager} class. Due to this abstraction, it should be easier to switch to database or
encrypted database systems in future without changing the design of the entire project. Currently, All configuration
files are stored at \texttt{/data/data/io.github.muntashirakon.AppManager/Files/conf}.</string>
    <string name="appendices_specifications-internal">The format below is used internally within App Manager and is \textit{not compatible with the external format.}
\begin{Verbatim}
    &lt;name&gt; &lt;type&gt; &lt;mode&gt;|&lt;component_status&gt;|&lt;is_granted&gt;
\end{Verbatim}
Here:
\begin{itemize}
    \item \texttt{&lt;name&gt;} -- Component/permission/app op name (in case of app op, it could be string or integer)
    \item \texttt{&lt;type&gt;} -- One of the \texttt{ACTIVITY}, \texttt{RECEIVER}, \texttt{PROVIDER}, \texttt{SERVICE},
    \texttt{APP\_OP},  \texttt{PERMISSION}
    \item \texttt{&lt;mode&gt;} -- (For app ops) The associated \hyperref[subsec:mode-constants]{mode constant}
    \item \texttt{&lt;component\_status&gt;} -- (For components) Component status
    \begin{itemize}
        \item \texttt{true} -- Component has been applied (\texttt{true} value is kept for compatibility)
        \item \texttt{false} -- Component hasn\'t been applied yet, but will be applied in future (\texttt{false} value
        is kept for compatibility)
        \item \texttt{unblocked} -- Component is scheduled to be unblocked
    \end{itemize}
    \item \texttt{&lt;is\_granted&gt;} -- (For permissions) Whether the permission is granted or revoked
\end{itemize}</string>
    <string name="appendices_specifications-external">External format is used for importing or exporting rules in App Manager.
\begin{Verbatim}
    &lt;package_name&gt; &lt;component_name&gt; &lt;type&gt; &lt;mode&gt;|&lt;component_status&gt;|&lt;is_granted&gt;
\end{Verbatim}
This the format is essentially the same as above except for the first item which is the name of the package.

\begin{danger}{Caution}
    The exported rules have a different format than the internal one and should not be copied directly to the
    \textbf{conf} folder.
\end{danger}</string>
    <string name="appendices_changelogs-chapter==title">Changelogs</string>
    <string name="appendices_appops-chapter==title">App Ops</string>
    <string name="appendices_appops-background==title">Background</string>
    <string name="appendices_appops-introduction==title">Introduction to App Ops</string>
    <string name="appendices_appops-howappopswork==title">How app ops work</string>
    <string name="appendices_appops-appopsmanager==title">AppOpsManager</string>
    <string name="appendices_appops-op-constants==title">\texttt{OP\_*} Constants</string>
    <string name="appendices_appops-sneakpeekopconstants==title">Sneak-peek of \texttt{OP\_*}</string>
    <string name="appendices_appops-mode-constants==title">\texttt{MODE\_*} Constants</string>
    <string name="appendices_appops-packageops==title">PackageOps</string>
    <string name="appendices_appops-classpackageops==title">Class \texttt{PackageOps}</string>
    <string name="appendices_appops-opentry==title">OpEntry</string>
    <string name="appendices_appops-classopentry==title">Class \texttt{OpEntry}</string>
    <string name="appendices_appops-usage==title">Usage</string>
    <string name="appendices_appops-appopsservice==title">AppOpsService</string>
    <string name="appendices_appops-appopsxml==title">appops.xml</string>
    <string name="appendices_appops-appopscli==title">Command Line Interface</string>
    <string name="appendices_appops-background">\textbf{App Ops} (short hand for \textbf{Application Operations}) are used by Android system (since Android 4.3) to
control application permissions. The user \emph{can} control some permissions, but only the permissions that are considered
dangerous (and Google thinks knowing your phone number isn\'t a dangerous thing). So, app ops seems to be the one we need
if we want to install apps like Facebook and it\'s Messenger (the latter literary records everything if you live outside
the EU) and still want \emph{some} privacy and/or security. Although certain features of app ops were available in
Settings and later in hidden settings in older version of Android, it\'s completely hidden in newer versions of Android
and is continued to be kept hidden. Now, any app with \textbf{android.Manifest.permission.GET\_APP\_OPS\_STATS}
permission can get the app ops information for other applications but this permission is hidden from users and can only
be enabled using ADB or root. Still, the app with this permission cannot grant or revoke permissions (actually mode of
operation) for apps other than itself (with limited capacity, of course). To modify the ops of other app, the app needs
\textbf{android.Manifest.permission.UPDATE\_APP\_OPS\_STATS} permissions which isn\'t accessible via \texttt{pm} command.
So, you cannot grant it via root or ADB, the permission is only granted to the system apps. There are very few apps who
support disabling permissions via app ops. The best one to my knowledge is
\href{https://github.com/8enet/AppOpsX}{AppOpsX}. The main (visible) difference between my app (AppManager) and this
app is that the latter also provides you the ability to revoke internet permissions (by writing ip tables). One crucial
problem that I faced during the development of the app ops API is the lack of documentation in English language.</string>
    <string name="appendices_appops-introduction">Figure \hyperref[fig:appops]{1} describes the process of changing and processing permission.
\hyperref[sec:appopsmanager]{AppOpsManager} can be used to manage permissions in Settings app. \textbf{AppOpsManager} is
also useful in determining if a certain permission (or operation) is granted to the application. Most of the methods of
\textbf{AppOpsManager} are accessible to the user app but unlike a system app, it can only be used to check permissions
for any app or for the app itself and start or terminating certain operations. Moreover, not all operations are actually
accessible from this Java class. \textbf{AppOpsManager} holds all the necessary constants such as
\hyperref[subsec:op-constants]{\texttt{OP\_*}}, \texttt{OPSTR\_*}, \hyperref[subsec:mode-constants]{\texttt{MODE\_*}}
which describes operation code, operation string and mode of operations respectively. It also holds necessary data
structures such as \hyperref[subsec:package-ops]{PackageOps} and \textbf{OpEntry}. \textbf{PackageOps} holds
\textbf{OpEntry} for a package, and \textbf{OpEntry}, as the name suggests, describes each operation.

\texttt{AppOpService} is completely hidden from a user application but accessible to the system applications.
As it can be seen in Figure \hyperref[fig:appops]{1}, this is the class that does the actual management stuff.
It contains data structures such as \textbf{Ops} to store basic package info and \textbf{Op} which is similar to
\textbf{OpEntry} of \textbf{AppOpsManager}.
It also has \textbf{Shell} which is actually the source code of the \hyperref[sec:appops-cli]{\textit{appops} command line tool}.
It writes configurations to or read configurations from \hyperref[sec:appops-xml]{\texttt{/data/system/appops.xml}}.
System services calls \textbf{AppOpsService} to find out what an application is allowed and what is not allowed to perform,
and \textbf{AppOpsService} determines these permissions by parsing \texttt{/data/system/appops.xml}. If no custom values
are present in \textit{appops.xml}, it returns the default mode available in \textbf{AppOpsManager}.</string>
    <string name="appendices_appops-appopsmanager">\href{https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/app/AppOpsManager.java}{AppOpsManager}
stands for application operations manager. It consists of various constants and classes to modify app operations.

\seealsoinline{\href{https://developer.android.com/reference/android/app/AppOpsManager}{AppOpsManager documentation}}</string>
    <string name="appendices_appops-op-constants_1">\texttt{OP\_*} are the integer constants starting from \texttt{0}. \texttt{OP\_NONE} implies that no operations are
specified whereas \texttt{\_NUM\_OP} denotes the number of operations defined in \texttt{OP\_*} prefix. While they
denote each operation, the operations are not necessarily unique. In fact, there are many operations that are actually
a single operation denoted by multiple \texttt{OP\_*} constant (possibly for future use). Vendors may define their own
op based on their requirements. MIUI is one of the vendors who are known to do that.</string>
    <string name="appendices_appops-op-constants_2">Whether an operation is unique is defined by \texttt{sOpToSwitch}.
It maps each operation to another operation or to itself (if it\'s a unique operation).
For instance, \texttt{OP\_FINE\_LOCATION} and \texttt{OP\_GPS} are mapped to \texttt{OP\_COARSE\_LOCATION}.

Each operation has a private name which are described by \texttt{sOpNames}.
These names are usually the same names as the constants without the \texttt{OP\_} prefix.
Some operations have public names as well which are described by \texttt{sOpToString}.
For instance, \texttt{OP\_COARSE\_LOCATION} has the public name \textbf{android:coarse\_location}.

As a gradual process of moving permissions to app ops, there are already many permissions that are defined under some operations.
These permissions are mapped in \texttt{sOpPerms}.
For example, the permission \textbf{android.Manifest.permission.ACCESS\_COARSE\_LOCATION} is mapped to
\texttt{OP\_COARSE\_LOCATION}. Some operations may not have any associated permissions which have \texttt{null} values.

As described in the previous section, operations that are configured for an app are stored at
\hyperref[sec:appops-xml]{\texttt{/data/system/appops.xml}}.
If an operation is not configured, then whether system will allow that operation is determined from \texttt{sOpDefaultMode}.
It lists the \textit{default mode} for each operation.</string>
    <string name="appendices_appops-mode-constants">\texttt{MODE\_*} constants also integer constants starting from \texttt{0}. These constants are assigned to each
operation describing whether an app is authorised to perform that operation. These modes usually have associated names
such as \textbf{allow} for \texttt{MODE\_ALLOWED}, \textbf{ignore} for \texttt{MODE\_IGNORED}, \textbf{deny} for
\texttt{MODE\_ERRORED} (a rather misnomer), \textbf{default} for \texttt{MODE\_DEFAULT} and \textbf{foreground}
for \texttt{MODE\_FOREGROUND}.

\begin{enumerate}
    \addtocounter{enumi}{-1}
    \item \textbf{\texttt{MODE\_ALLOWED}.} The app is allowed to perform the given operation
    \item \textbf{\texttt{MODE\_IGNORED}.} The app is not allowed to perform the given operation, and any attempt to
    perform the operation should \emph{silently fail}, i.e.\ it should not cause the app to crash
    \item \textbf{\texttt{MODE\_ERRORED}.} The app is not allowed to perform the given operation, and this attempt
    should cause it to have a fatal error, typically a \texttt{SecurityException}
    \item \textbf{\texttt{MODE\_DEFAULT}.} The app should use its default security check, specified in \texttt{AppOpsManager}
    \item \textbf{\texttt{MODE\_FOREGROUND}.} Special mode that means ``allow only when app is in foreground.\'\'
    This mode was added in Android 10
    \item \textbf{\texttt{MODE\_ASK}.} This is a custom mode used by MIUI whose uses are unknown.
\end{enumerate}</string>
    <string name="appendices_appops-packageops_1">\textbf{AppOpsManager.PackageOps} is a data structure to store all the \textbf{OpEntry} for a package. In simple terms,
it stores all the customised operations for a package.</string>
    <string name="appendices_appops-packageops_2">As can be seen in Listing \hyperref[cb12]{2}, it stores all \textbf{OpEntry} for a package as well as the
corresponding package name and its kernel user ID\\@.</string>
    <string name="appendices_appops-opentry_1">\textbf{AppOpsManager.OpEntry} is a data structure that stores a single operation for any package.</string>
    <string name="appendices_appops-opentry_2">Here:
\begin{itemize}
    \item \texttt{mOp}: Denotes one of the \hyperref[subsec:op-constants]{\texttt{OP\_*} constants}
    \item \texttt{mRunning}: Whether the operation is in progress (i.e.\ the operation has started but not finished
    yet). Not all operations can be started or finished this way
    \item \texttt{mMOde}: One of the \hyperref[subsec:mode-constants]{\texttt{MODE\_*} constants}
    \item \texttt{mAccessTimes}: Stores all the available access times
    \item \texttt{mRejectTimes}: Stores all the available reject times
    \item \texttt{mDurations}: All available access durations, checking this with \texttt{mRunning} will tell you for
    how long the app is performing a certain app operation
    \item \texttt{mProxyUids}: No documentation found
    \item \texttt{mProxyPackageNames:} No documentation found
\end{itemize}</string>
    <string name="appendices_appops-appopsxml_1">Latest \texttt{appops.xml} has the following format: (This DTD is made by me and by no means perfect, has compatibility issues.)</string>
    <string name="appendices_appops-appopsxml_2">The instruction below follows the exact order given above:
\begin{itemize}
    \item \texttt{app-ops}: The root element. It can contain any number of \texttt{pkg} or package \texttt{uid}
    \begin{itemize}
        \item \texttt{v}: (optional, integer) The version number (default: \texttt{NO\_VERSION} or \texttt{-1})
    \end{itemize}

    \item \texttt{pkg}: Stores package info. It can contain any number of \texttt{uid}
    \begin{itemize}
        \item \texttt{n}: (required, string) Name of the package
    \end{itemize}

    \item Package \texttt{uid}: Stores package or packages info
    \begin{itemize}
        \item \texttt{n}: (required, integer) The user ID
    \end{itemize}

    \item \texttt{uid}: The package user ID. It can contain any number of \texttt{op}
    \begin{itemize}
        \item \texttt{n}: (required, integer) The user ID
        \item \texttt{p}: (optional, boolean) Is the app is a private/system app
    \end{itemize}

    \item \texttt{op}: The operation, can contain \texttt{st} or nothing at all
    \begin{itemize}
        \item \texttt{n}: (required, integer) The op name in integer, i.e.\ AppOpsManager.OP\_*
        \item \texttt{m}: (required, integer) The op mode, i.e.\ AppOpsManager.MODE\_*
    \end{itemize}

    \item \texttt{st}: State of operation: whether the operation is accessed, rejected or running (not available on old versions)
    \begin{itemize}
        \item \texttt{n}: (required, long) Key containing flags and uid
        \item \texttt{t}: (optional, long) Access time (default: \texttt{0})
        \item \texttt{r}: (optional, long) Reject time (default: \texttt{0})
        \item \texttt{d}: (optional, long) Access duration (default: \texttt{0})
        \item \texttt{pp}: (optional, string) Proxy package name
        \item \texttt{pu}: (optional, integer) Proxy package uid
    \end{itemize}
\end{itemize}

This definition can be found at
\href{https://android.googlesource.com/platform/frameworks/base/+/master/services/core/java/com/android/server/appop/AppOpsService.java}{AppOpsService}.</string>
    <string name="appendices_appops-appopscli">\texttt{appops} or \texttt{cmd appops} (on latest versions) can be accessible via ADB or root. This is an easier method
to get or update any operation for a package (provided the package name is known). The help page of this command is
self-explanatory:</string>
</resources>
